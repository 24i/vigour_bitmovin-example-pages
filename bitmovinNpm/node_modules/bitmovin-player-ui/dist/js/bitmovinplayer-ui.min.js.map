{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/components/adclickoverlay.ts","src/ts/components/admessagelabel.ts","src/ts/components/adskipbutton.ts","src/ts/components/audioqualityselectbox.ts","src/ts/components/audiotrackselectbox.ts","src/ts/components/bufferingoverlay.ts","src/ts/components/button.ts","src/ts/components/caststatusoverlay.ts","src/ts/components/casttogglebutton.ts","src/ts/components/castuicontainer.ts","src/ts/components/clickoverlay.ts","src/ts/components/closebutton.ts","src/ts/components/component.ts","src/ts/components/container.ts","src/ts/components/controlbar.ts","src/ts/components/errormessageoverlay.ts","src/ts/components/fullscreentogglebutton.ts","src/ts/components/hugeplaybacktogglebutton.ts","src/ts/components/hugereplaybutton.ts","src/ts/components/label.ts","src/ts/components/listselector.ts","src/ts/components/metadatalabel.ts","src/ts/components/playbackspeedselectbox.ts","src/ts/components/playbacktimelabel.ts","src/ts/components/playbacktogglebutton.ts","src/ts/components/playbacktoggleoverlay.ts","src/ts/components/recommendationoverlay.ts","src/ts/components/seekbar.ts","src/ts/components/seekbarlabel.ts","src/ts/components/selectbox.ts","src/ts/components/settingspanel.ts","src/ts/components/settingstogglebutton.ts","src/ts/components/subtitleoverlay.ts","src/ts/components/subtitleselectbox.ts","src/ts/components/titlebar.ts","src/ts/components/togglebutton.ts","src/ts/components/tvnoisecanvas.ts","src/ts/components/uicontainer.ts","src/ts/components/videoqualityselectbox.ts","src/ts/components/volumecontrolbutton.ts","src/ts/components/volumeslider.ts","src/ts/components/volumetogglebutton.ts","src/ts/components/vrtogglebutton.ts","src/ts/components/watermark.ts","src/ts/dom.ts","src/ts/eventdispatcher.ts","src/ts/guid.ts","src/ts/main.ts","src/ts/timeout.ts","src/ts/uimanager.ts","src/ts/utils.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","clickoverlay_1","AdClickOverlay","_super","__extends","prototype","configure","player","uimanager","this","self","clickThroughUrl","clickThroughEnabled","getConfig","advertising","hasOwnProperty","addEventHandler","bitmovin","EVENT","ON_AD_STARTED","event","setUrl","adFinishedHandler","ON_AD_FINISHED","ON_AD_SKIPPED","onClick","subscribe","pause","fireEvent","ON_AD_CLICKED","ClickOverlay","label_1","utils_1","AdMessageLabel","config","_this","mergeConfig","cssClass","text","updateMessageHandler","setText","StringUtils","replaceAdMessagePlaceholders","adStartHandler","adMessage","ON_TIME_CHANGED","ON_CAST_TIME_UPDATED","adEndHandler","removeEventHandler","Label","button_1","AdSkipButton","skipMessage","countdown","skip","adEvent","updateSkipMessageHandler","skipOffset","show","hide","getCurrentTime","skipAd","Button","selectbox_1","AudioQualitySelectBox","updateAudioQualities","audioQualities","getAvailableAudioQualities","clearItems","addItem","_i","audioQualities_1","audioQuality","id","label","onItemSelected","sender","value","setAudioQuality","ON_AUDIO_CHANGED","ON_SOURCE_UNLOADED","ON_READY","ON_AUDIO_DOWNLOAD_QUALITY_CHANGED","data","getDownloadedAudioData","selectItem","isAuto","SelectBox","AudioTrackSelectBox","updateAudioTracks","audioTracks","getAvailableAudio","audioTracks_1","audioTrack","setAudio","audioTrackHandler","currentAudioTrack","getAudio","container_1","component_1","BufferingOverlay","indicators","Component","tag","hidden","components","ON_STALL_STARTED","ON_STALL_ENDED","Container","dom_1","eventdispatcher_1","buttonEvents","EventDispatcher","toDomElement","buttonElement","DOM","type","class","getCssClasses","append","prefixCss","html","on","onClickEvent","getDomElement","find","dispatch","Object","defineProperty","getEvent","CastStatusOverlay","statusLabel","castDeviceName","ON_CAST_START","ON_CAST_WAITING_FOR_DEVICE","castPayload","deviceName","ON_CAST_STARTED","ON_CAST_STOPPED","togglebutton_1","CastToggleButton","isCastAvailable","isCasting","castStop","castVideo","console","log","castAvailableHander","ON_CAST_AVAILABLE","off","ToggleButton","uicontainer_1","timeout_1","CastUIContainer","isUiShown","hideUi","onControlsHide","uiHideTimeout","Timeout","hideDelay","showUi","onControlsShow","showUiPermanently","clear","showUiWithTimeout","start","showUiAfterSeek","isPlaying","ON_SOURCE_LOADED","ON_PLAY","ON_PAUSED","ON_SEEK","ON_SEEKED","UIContainer","initialize","url","element","window","open","getUrl","undefined","CloseButton","target","guid_1","componentEvents","onShow","onHide","Guid","next","cssPrefix","cssClasses","isHidden","onComponentShow","onComponentHide","defaults","base","merged","assign","flattenedArray","concat","map","css","flattenedString","join","trim","cssClassOrId","addClass","CLASS_HIDDEN","onHideEvent","removeClass","onShowEvent","isShown","toggleHidden","addComponent","component","push","removeComponent","ArrayUtils","remove","getComponents","updateComponents","innerContainerElement","empty","_a","containerElement","innerContainer","ControlBar","tvnoisecanvas_1","ErrorMessageOverlay","errorLabel","tvNoiseBackground","TvNoiseCanvas","ON_ERROR","message","FullscreenToggleButton","fullscreenStateHandler","isFullscreen","ON_FULLSCREEN_ENTER","ON_FULLSCREEN_EXIT","exitFullscreen","enterFullscreen","playbacktogglebutton_1","HugePlaybackToggleButton","togglePlayback","play","toggleFullscreen","firstClick","clickTime","doubleClickTime","now","Date","setTimeout","castInitializationHandler","PlaybackToggleButton","HugeReplayButton","labelEvents","labelElement","clearText","ListSelector","listSelectorEvents","onItemAdded","onItemRemoved","items","getItemIndex","key","index","parseInt","hasItem","removeItem","onItemAddedEvent","onItemRemovedEvent","selectedItem","onItemSelectedEvent","getSelectedItem","items_1","item","itemCount","keys","MetadataLabelContent","MetadataLabel","content","toLowerCase","uiconfig","Title","metadata","title","Description","description","PlaybackSpeedSelectBox","setPlaybackSpeed","parseFloat","PlaybackTimeLabelMode","PlaybackTimeLabel","timeLabelMode","CurrentAndTotalTime","hideInLivePlayback","live","liveCssClass","liveEdgeCssClass","minWidth","liveClickHandler","timeShift","updateLiveState","getDuration","Infinity","updateLiveTimeshiftState","unsubscribe","getTimeShift","playbackTimeHandler","setTime","width","min-width","ON_TIME_SHIFT","ON_TIME_SHIFTED","init","timeFormat","Math","abs","isLive","getMaxTimeShift","FORMAT_HHMMSS","FORMAT_MMSS","playbackSeconds","durationSeconds","currentTime","secondsToTime","totalTime","CurrentTime","TotalTime","handleClickEvent","isSeeking","playbackStateHandler","ON_CAST_PLAYING","ON_CAST_PAUSED","ON_PLAYBACK_FINISHED","ON_CAST_PLAYBACK_FINISHED","onSeek","onSeeked","hugeplaybacktogglebutton_1","PlaybackToggleOverlay","playbackToggleButton","hugereplaybutton_1","RecommendationOverlay","replayButton","recommendations","RecommendationItem","itemConfig","isAd","itemElement","href","background-image","thumbnail","bgElement","titleElement","timeElement","duration","SeekBar","playbackPositionPercentage","touchSupported","seekBarEvents","onSeekPreview","timelineMarkers","hasLabel","getLabel","configureSeek","markers","chapter","time","playbackNotInitialized","playbackPositionHandler","setPlaybackPosition","setBufferPosition","videoBufferLength","getVideoBufferLength","audioBufferLength","getAudioBufferLength","bufferLength","min","Number","MAX_VALUE","bufferPercentage","isPaused","ON_SEGMENT_REQUEST_FINISHED","currentTimeSeekBar","currentTimePlayer","updateIntervalMs","currentTimeUpdateDeltaSecs","smoothPlaybackPositionUpdater","currentTimeDelta","setSeeking","seek","percentage","args","subscribeRateLimited","scrubbing","position","ON_PLAYER_RESIZE","refreshPlaybackPosition","setSeekPosition","updateMarkers","vertical","seekBarContainer","seekBar","seekBarBufferLevel","seekBarBufferPosition","seekBarPlaybackPosition","seekBarPlaybackPositionMarker","seekBarSeekPosition","seekBarBackdrop","seekBarChapterMarkersContainer","seekBarMarkersContainer","seeking","mouseTouchMoveHandler","preventDefault","stopPropagation","targetPercentage","getOffset","onSeekPreviewEvent","mouseTouchUpHandler","document","snappedChapter","getMarkerAtPosition","onSeekedEvent","isTouchEvent","TouchEvent","onSeekEvent","marker","data-marker-time","String","data-marker-title","snappedMarker","snappingRange","getHorizontalOffset","eventPageX","elementOffsetPx","offset","left","widthPx","offsetPx","sanitizeOffset","getVerticalOffset","eventPageY","top","height","changedTouches","pageY","touches","pageX","MouseEvent","warn","percent","setPosition","px","style","transform","-ms-transform","scale","CLASS_SEEKING","hasClass","SeekBarLabel","timeLabel","titleLabel","setTitleText","setThumbnail","getThumb","seconds","thumbnailElement","display","w","h","background-position","x","y","listselector_1","selectElement","updateDomItems","val","selectedValue","optionElement","attr","videoqualityselectbox_1","audioqualityselectbox_1","SettingsPanel","settingsPanelEvents","onSettingsStateChanged","timeout_2","reset","settingsStateChangedHandler","onSettingsStateChangedEvent","lastShownItem","getItems","SettingsPanelItem","CLASS_LAST","onActiveChanged","hasActiveSettings","isActive","selectBox","settingsPanelItemEvents","setting","handleConfigItemChanged","minItemsToDisplay","VideoQualitySelectBox","onActiveChangedEvent","SettingsToggleButton","settingsPanel","autoHideWhenNoActiveSettings","settingsPanelItemsChangedHandler","controlbar_1","SubtitleOverlay","subtitleLabel","ON_CUE_ENTER","ON_CUE_EXIT","subtitleClearHandler","ON_SUBTITLE_CHANGED","CLASS_CONTROLBAR_VISIBLE","SubtitleSelectBox","updateSubtitles","getAvailableSubtitles","subtitle","setSubtitle","ON_SUBTITLE_ADDED","targetSubtitle","ON_SUBTITLE_REMOVED","subtitleId","metadatalabel_1","TitleBar","toggleButtonEvents","onToggle","onToggleOn","onToggleOff","isOff","onState","CLASS_OFF","CLASS_ON","onToggleEvent","onToggleOnEvent","isOn","onToggleOffEvent","toggle","canvasWidth","canvasHeight","interferenceHeight","lastFrameUpdate","frameInterval","useAnimationFrame","requestAnimationFrame","canvas","canvasElement","getElements","canvasContext","getContext","noiseAnimationWindowPos","renderFrame","stop","cancelAnimationFrame","frameUpdateHandlerId","clearTimeout","getTime","scheduleNextRender","currentPixelOffset","noiseImage","createImageData","random","putImageData","bind","configureUIShowHide","configurePlayerStates","container","removeStates","STATE_IDLE","STATE_PREPARED","STATE_PLAYING","STATE_PAUSED","STATE_FINISHED","PlayerUtils","isSourceLoaded","FULLSCREEN","BUFFERING","isStalled","CONTROLS_HIDDEN","CONTROLS_SHOWN","updateLayoutSizeClasses","round","substring","getFigure","createElement","flex","updateVideoQualities","videoQualities","getAvailableVideoQualities","videoQualities_1","videoQuality","setVideoQuality","ON_VIDEO_DOWNLOAD_QUALITY_CHANGED","getDownloadedVideoData","volumeslider_1","volumetogglebutton_1","VolumeControlButton","volumeToggleButton","VolumeToggleButton","volumeSlider","VolumeSlider","getVolumeToggleButton","getVolumeSlider","timeout","volumeSliderHovered","seekbar_1","volumeChangeHandler","isMuted","getVolume","ON_VOLUME_CHANGED","ON_MUTED","ON_UNMUTED","setVolume","muteStateHandler","unmute","mute","targetVolume","VRToggleButton","isVRConfigured","source","vr","contentType","isVRStereoAvailable","getVRStatus","vrStateHandler","isStereo","vrButtonVisibilityHandler","ON_VR_MODE_CHANGED","ON_VR_STEREO_CHANGED","ON_VR_ERROR","setVRStereo","Watermark","something","attributes","Array","HTMLElement","elements","Document","tagName","attributeName","attributeValue","setAttribute","selector","findChildElements","forEach","handler","findChildElementsOfElement","childElements","querySelectorAll","slice","allChildElements","arguments","setHtml","getHtml","innerHTML","HTMLSelectElement","HTMLInputElement","attribute","setAttr","getAttr","getAttribute","dataAttribute","setData","getData","childElement","_","appendChild","parent","parentNode","removeChild","elementRect","getBoundingClientRect","htmlRect","body","parentElement","offsetWidth","offsetHeight","eventName","eventHandler","events","split","addEventListener","removeEventListener","className","classList","add","replace","RegExp","contains","test","propertyNameOrCollection","propertyName","setCss","getCss","propertyValueCollection","setCssCollection","getComputedStyle","ruleValueCollection","listeners","listener","EventListenerWrapper","subscribeOnce","rateMs","RateLimitedEventListenerWrapper","subscribedListener","unsubscribeAll","listenersToRemove","fire","isOnce","_b","listenersToRemove_1","listenerToRemove","once","eventListener","lastFireTime","rateLimitingEventListener","fireSuper","guid","uimanager_1","fullscreentogglebutton_1","playbacktimelabel_1","settingspanel_1","settingstogglebutton_1","vrtogglebutton_1","watermark_1","audiotrackselectbox_1","caststatusoverlay_1","casttogglebutton_1","errormessageoverlay_1","recommendationoverlay_1","seekbarlabel_1","subtitleoverlay_1","subtitleselectbox_1","titlebar_1","volumecontrolbutton_1","adskipbutton_1","admessagelabel_1","adclickoverlay_1","playbackspeedselectbox_1","bufferingoverlay_1","castuicontainer_1","playbacktoggleoverlay_1","closebutton_1","TypeError","playerui","UIManager","UIInstanceManager","delay","callback","repeat","timeoutHandle","lastScheduleTime","delayAdjust","internalCallback","delta","playerUi","adsUi","InternalUIInstanceManager","managerPlayerWrapper","PlayerWrapper","playerElement","addUi","adsUiAdded_1","enterAdsUi","clientType","getWrappedPlayer","fireEventInUI","exitAdsUi","getPlayer","ON_AD_ERROR","configureControls","manager","childComponent","ui","dom","getUI","releaseUi","clearEventHandlers","release","Factory","buildDefaultUI","buildModernUI","buildDefaultSmallScreenUI","buildModernSmallScreenUI","buildDefaultCastReceiverUI","buildModernCastReceiverUI","controlBar","buildLegacyUI","buildLegacyCastReceiverUI","buildLegacyTestUI","playerWrapper","event_1","dispatcher","eventHandlers","methods","member","wrapper","apply","methods_1","eventType","playerEventData","timestamp","uiSourced","array","indexOf","splice","totalSeconds","format","isNegative","hours","floor","minutes","leftPadWithZeros","num","padding","substr","adMessagePlaceholderRegex","formatString","ceil","formatNumber","formatStringValidationRegex","leadingZeroesRegex","decimalPlacesRegex","leadingZeroes","leadingZeroesMatches","match","numDecimalPlaces","decimalPlacesMatches","isNaN","timeString","toFixed"],"mappings":"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","file":"bitmovinplayer-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import {ClickOverlay} from './clickoverlay';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * A simple click capture overlay for clickThroughUrls of ads.\r\n */\r\nexport class AdClickOverlay extends ClickOverlay {\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n    let clickThroughUrl = <string>null;\r\n    let clickThroughEnabled = !player.getConfig().advertising\r\n      || !player.getConfig().advertising.hasOwnProperty('clickThroughEnabled')\r\n      || player.getConfig().advertising.clickThroughEnabled;\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AD_STARTED, function(event: bitmovin.player.AdStartedEvent) {\r\n      clickThroughUrl = event.clickThroughUrl;\r\n\r\n      if (clickThroughEnabled) {\r\n        self.setUrl(clickThroughUrl);\r\n      } else {\r\n        // If click-through is disabled, we set the url to null to avoid it open\r\n        self.setUrl(null);\r\n      }\r\n    });\r\n\r\n    // Clear click-through URL when ad has finished\r\n    let adFinishedHandler = function() {\r\n      self.setUrl(null);\r\n    };\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AD_FINISHED, adFinishedHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AD_SKIPPED, adFinishedHandler);\r\n\r\n    self.onClick.subscribe(function() {\r\n      // Pause the ad when overlay is clicked\r\n      player.pause('ui-content-click');\r\n\r\n      // Notify the player of the clicked ad\r\n      player.fireEvent(bitmovin.player.EVENT.ON_AD_CLICKED, {\r\n        clickThroughUrl: clickThroughUrl\r\n      });\r\n    });\r\n  }\r\n}","import {Label, LabelConfig} from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {StringUtils} from '../utils';\r\n\r\n/**\r\n * A label that displays a message about a running ad, optionally with a countdown.\r\n */\r\nexport class AdMessageLabel extends Label<LabelConfig> {\r\n\r\n  constructor(config: LabelConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-label-ad-message',\r\n      text: 'This ad will end in {remainingTime} seconds.'\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n    let text = this.getConfig().text;\r\n\r\n    let updateMessageHandler = function() {\r\n      self.setText(StringUtils.replaceAdMessagePlaceholders(text, null, player));\r\n    };\r\n\r\n    let adStartHandler = function(event: bitmovin.player.AdStartedEvent) {\r\n      text = event.adMessage || text;\r\n      updateMessageHandler();\r\n\r\n      player.addEventHandler(bitmovin.player.EVENT.ON_TIME_CHANGED, updateMessageHandler);\r\n      player.addEventHandler(bitmovin.player.EVENT.ON_CAST_TIME_UPDATED, updateMessageHandler);\r\n    };\r\n\r\n    let adEndHandler = function() {\r\n      player.removeEventHandler(bitmovin.player.EVENT.ON_TIME_CHANGED, updateMessageHandler);\r\n      player.removeEventHandler(bitmovin.player.EVENT.ON_CAST_TIME_UPDATED, updateMessageHandler);\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AD_STARTED, adStartHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AD_SKIPPED, adEndHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AD_FINISHED, adEndHandler);\r\n  }\r\n}","import {ButtonConfig, Button} from './button';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport SkipMessage = bitmovin.player.SkipMessage;\r\nimport {StringUtils} from '../utils';\r\n\r\n/**\r\n * Configuration interface for the {@link AdSkipButton}.\r\n */\r\nexport interface AdSkipButtonConfig extends ButtonConfig {\r\n  skipMessage?: SkipMessage;\r\n}\r\n\r\n/**\r\n * A button that is displayed during ads and can be used to skip the ad.\r\n */\r\nexport class AdSkipButton extends Button<AdSkipButtonConfig> {\r\n\r\n  constructor(config: AdSkipButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, <AdSkipButtonConfig>{\r\n      cssClass: 'ui-button-ad-skip',\r\n      skipMessage: {\r\n        countdown: 'Skip ad in {remainingTime}',\r\n        skip: 'Skip ad'\r\n      }\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n    let config = <AdSkipButtonConfig>this.getConfig(); // TODO get rid of generic cast\r\n    let skipMessage = config.skipMessage;\r\n    let adEvent = <bitmovin.player.AdStartedEvent>null;\r\n\r\n    let updateSkipMessageHandler = function() {\r\n      // Display this button only if ad is skippable\r\n      if (adEvent.skipOffset) {\r\n        self.show();\r\n      } else {\r\n        self.hide();\r\n      }\r\n\r\n      // Update the skip message on the button\r\n      if (player.getCurrentTime() < adEvent.skipOffset) {\r\n        self.setText(\r\n          StringUtils.replaceAdMessagePlaceholders(config.skipMessage.countdown, adEvent.skipOffset, player));\r\n      } else {\r\n        self.setText(config.skipMessage.skip);\r\n      }\r\n    };\r\n\r\n    let adStartHandler = function(event: bitmovin.player.AdStartedEvent) {\r\n      adEvent = event;\r\n      skipMessage = adEvent.skipMessage || skipMessage;\r\n      updateSkipMessageHandler();\r\n\r\n      player.addEventHandler(bitmovin.player.EVENT.ON_TIME_CHANGED, updateSkipMessageHandler);\r\n      player.addEventHandler(bitmovin.player.EVENT.ON_CAST_TIME_UPDATED, updateSkipMessageHandler);\r\n    };\r\n\r\n    let adEndHandler = function() {\r\n      player.removeEventHandler(bitmovin.player.EVENT.ON_TIME_CHANGED, updateSkipMessageHandler);\r\n      player.removeEventHandler(bitmovin.player.EVENT.ON_CAST_TIME_UPDATED, updateSkipMessageHandler);\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AD_STARTED, adStartHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AD_SKIPPED, adEndHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AD_FINISHED, adEndHandler);\r\n\r\n    self.onClick.subscribe(function() {\r\n      // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)\r\n      player.skipAd();\r\n    });\r\n  }\r\n}","import {SelectBox} from './selectbox';\r\nimport {ListSelectorConfig} from './listselector';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * A select box providing a selection between 'auto' and the available audio qualities.\r\n */\r\nexport class AudioQualitySelectBox extends SelectBox {\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    let updateAudioQualities = function() {\r\n      let audioQualities = player.getAvailableAudioQualities();\r\n\r\n      self.clearItems();\r\n\r\n      // Add entry for automatic quality switching (default setting)\r\n      self.addItem('auto', 'auto');\r\n\r\n      // Add audio qualities\r\n      for (let audioQuality of audioQualities) {\r\n        self.addItem(audioQuality.id, audioQuality.label);\r\n      }\r\n    };\r\n\r\n    self.onItemSelected.subscribe(function(sender: AudioQualitySelectBox, value: string) {\r\n      player.setAudioQuality(value);\r\n    });\r\n\r\n    // Update qualities when audio track has changed\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AUDIO_CHANGED, updateAudioQualities);\r\n    // Update qualities when source goes away\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SOURCE_UNLOADED, updateAudioQualities);\r\n    // Update qualities when a new source is loaded\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_READY, updateAudioQualities);\r\n    // Update quality selection when quality is changed (from outside)\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AUDIO_DOWNLOAD_QUALITY_CHANGED, function() {\r\n      let data = player.getDownloadedAudioData();\r\n      self.selectItem(data.isAuto ? 'auto' : data.id);\r\n    });\r\n\r\n    // Populate qualities at startup\r\n    updateAudioQualities();\r\n  }\r\n}","import {SelectBox} from './selectbox';\r\nimport {ListSelectorConfig} from './listselector';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * A select box providing a selection between available audio tracks (e.g. different languages).\r\n */\r\nexport class AudioTrackSelectBox extends SelectBox {\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    let updateAudioTracks = function() {\r\n      let audioTracks = player.getAvailableAudio();\r\n\r\n      self.clearItems();\r\n\r\n      // Add audio tracks\r\n      for (let audioTrack of audioTracks) {\r\n        self.addItem(audioTrack.id, audioTrack.label);\r\n      }\r\n    };\r\n\r\n    self.onItemSelected.subscribe(function(sender: AudioTrackSelectBox, value: string) {\r\n      player.setAudio(value);\r\n    });\r\n\r\n    let audioTrackHandler = function() {\r\n      let currentAudioTrack = player.getAudio();\r\n      self.selectItem(currentAudioTrack.id);\r\n    };\r\n\r\n    // Update selection when selected track has changed\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AUDIO_CHANGED, audioTrackHandler);\r\n    // Update tracks when source goes away\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SOURCE_UNLOADED, updateAudioTracks);\r\n    // Update tracks when a new source is loaded\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_READY, updateAudioTracks);\r\n\r\n    // Populate tracks at startup\r\n    updateAudioTracks();\r\n  }\r\n}","import {ContainerConfig, Container} from './container';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {Component, ComponentConfig} from './component';\r\n\r\n/**\r\n * Overlays the player and displays a buffering indicator.\r\n */\r\nexport class BufferingOverlay extends Container<ContainerConfig> {\r\n\r\n  private indicators: Component<ComponentConfig>[];\r\n\r\n  constructor(config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.indicators = [\r\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator' }),\r\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator' }),\r\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator' }),\r\n    ];\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-buffering-overlay',\r\n      hidden: true,\r\n      components: this.indicators\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_STALL_STARTED, function() {\r\n      self.show();\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_STALL_ENDED, function() {\r\n      self.hide();\r\n    });\r\n  }\r\n}\r\n","import {ComponentConfig, Component} from './component';\r\nimport {DOM} from '../dom';\r\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\r\n\r\n/**\r\n * Configuration interface for a {@link Button} component.\r\n */\r\nexport interface ButtonConfig extends ComponentConfig {\r\n  /**\r\n   * The text on the button.\r\n   */\r\n  text?: string;\r\n}\r\n\r\n/**\r\n * A simple clickable button.\r\n */\r\nexport class Button<Config extends ButtonConfig> extends Component<ButtonConfig> {\r\n\r\n  private buttonEvents = {\r\n    onClick: new EventDispatcher<Button<Config>, NoArgs>()\r\n  };\r\n\r\n  constructor(config: ButtonConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-button'\r\n    }, this.config);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let self = this;\r\n\r\n    // Create the button element with the text label\r\n    let buttonElement = new DOM('button', {\r\n      'type': 'button',\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses()\r\n    }).append(new DOM('span', {\r\n      'class': this.prefixCss('label')\r\n    }).html(this.config.text));\r\n\r\n    // Listen for the click event on the button element and trigger the corresponding event on the button component\r\n    buttonElement.on('click', function() {\r\n      self.onClickEvent();\r\n    });\r\n\r\n    return buttonElement;\r\n  }\r\n\r\n  /**\r\n   * Sets text on the label of the button.\r\n   * @param text the text to put into the label of the button\r\n   */\r\n  setText(text: string): void {\r\n    this.getDomElement().find('.' + this.prefixCss('label')).html(text);\r\n  }\r\n\r\n  protected onClickEvent() {\r\n    this.buttonEvents.onClick.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the button is clicked.\r\n   * @returns {Event<Button<Config>, NoArgs>}\r\n   */\r\n  get onClick(): Event<Button<Config>, NoArgs> {\r\n    return this.buttonEvents.onClick.getEvent();\r\n  }\r\n}","import {ContainerConfig, Container} from './container';\r\nimport {Label, LabelConfig} from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport CastWaitingForDeviceEvent = bitmovin.player.CastWaitingForDeviceEvent;\r\nimport CastLaunchedEvent = bitmovin.player.CastLaunchedEvent;\r\nimport CastStoppedEvent = bitmovin.player.CastStoppedEvent;\r\n\r\n/**\r\n * Overlays the player and displays the status of a Cast session.\r\n */\r\nexport class CastStatusOverlay extends Container<ContainerConfig> {\r\n\r\n  private statusLabel: Label<LabelConfig>;\r\n\r\n  constructor(config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.statusLabel = new Label<LabelConfig>({ cssClass: 'ui-cast-status-label' });\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-cast-status-overlay',\r\n      components: [this.statusLabel],\r\n      hidden: true\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n    let castDeviceName = 'unknown';\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_START, function(event) {\r\n      // Show Cast status when a session is being started\r\n      self.show();\r\n      self.statusLabel.setText('Select a Cast device');\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_WAITING_FOR_DEVICE,\r\n      function(event: CastWaitingForDeviceEvent) {\r\n        // Get device name and update status text while connecting\r\n        castDeviceName = event.castPayload.deviceName;\r\n        self.statusLabel.setText(`Connecting to <strong>${castDeviceName}</strong>...`);\r\n      });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_STARTED, function(event: CastLaunchedEvent) {\r\n      // Session is started or resumed\r\n      // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel\r\n      // here too\r\n      self.show();\r\n      self.statusLabel.setText(`Playing on <strong>${castDeviceName}</strong>`);\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_STOPPED, function(event: CastStoppedEvent) {\r\n      // Cast session gone, hide the status panel\r\n      self.hide();\r\n    });\r\n  }\r\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * A button that toggles casting to a Cast receiver.\r\n */\r\nexport class CastToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-casttogglebutton',\r\n      text: 'Google Cast'\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    self.onClick.subscribe(function() {\r\n      if (player.isCastAvailable()) {\r\n        if (player.isCasting()) {\r\n          player.castStop();\r\n        } else {\r\n          player.castVideo();\r\n        }\r\n      } else {\r\n        if (console) {\r\n          console.log('Cast unavailable');\r\n        }\r\n      }\r\n    });\r\n\r\n    let castAvailableHander = function() {\r\n      if (player.isCastAvailable()) {\r\n        self.show();\r\n      } else {\r\n        self.hide();\r\n      }\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_AVAILABLE, castAvailableHander);\r\n\r\n    // Toggle button 'on' state\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_STARTED, function() {\r\n      self.on();\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_STOPPED, function() {\r\n      self.off();\r\n    });\r\n\r\n    // Startup init\r\n    castAvailableHander(); // Hide button if Cast not available\r\n    if (player.isCasting()) {\r\n      self.on();\r\n    }\r\n  }\r\n}","import {UIContainer, UIContainerConfig} from './uicontainer';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {Timeout} from '../timeout';\r\n\r\n/**\r\n * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on\r\n * certain playback events.\r\n */\r\nexport class CastUIContainer extends UIContainer {\r\n\r\n  constructor(config: UIContainerConfig) {\r\n    super(config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n    let config = <UIContainerConfig>this.getConfig();\r\n\r\n    /*\r\n     * Show UI on Cast devices at certain playback events\r\n     *\r\n     * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user\r\n     * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can\r\n     * see the current time and position on the seek bar.\r\n     * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured\r\n     * hide delay time.\r\n     */\r\n\r\n    let isUiShown = false;\r\n\r\n    let hideUi = function() {\r\n      uimanager.onControlsHide.dispatch(self);\r\n      isUiShown = false;\r\n    };\r\n\r\n    let uiHideTimeout = new Timeout(config.hideDelay, hideUi);\r\n\r\n    let showUi = function() {\r\n      if (!isUiShown) {\r\n        uimanager.onControlsShow.dispatch(self);\r\n        isUiShown = true;\r\n      }\r\n    };\r\n\r\n    let showUiPermanently = function() {\r\n      showUi();\r\n      uiHideTimeout.clear();\r\n    };\r\n\r\n    let showUiWithTimeout = function() {\r\n      showUi();\r\n      uiHideTimeout.start();\r\n    };\r\n\r\n    let showUiAfterSeek = function() {\r\n      if (player.isPlaying()) {\r\n        showUiWithTimeout();\r\n      } else {\r\n        showUiPermanently();\r\n      }\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_READY, showUiWithTimeout);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SOURCE_LOADED, showUiWithTimeout);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PLAY, showUiWithTimeout);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PAUSED, showUiPermanently);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SEEK, showUiPermanently);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SEEKED, showUiAfterSeek);\r\n  }\r\n}","import {Button, ButtonConfig} from './button';\r\n\r\n/**\r\n * Configuration interface for a {@link ClickOverlay}.\r\n */\r\nexport interface ClickOverlayConfig extends ButtonConfig {\r\n  /**\r\n   * The url to open when the overlay is clicked. Set to null to disable the click handler.\r\n   */\r\n  url?: string;\r\n}\r\n\r\n/**\r\n * A click overlay that opens an url in a new tab if clicked.\r\n */\r\nexport class ClickOverlay extends Button<ClickOverlayConfig> {\r\n\r\n  constructor(config: ClickOverlayConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-clickoverlay'\r\n    }, <ClickOverlayConfig>this.config);\r\n  }\r\n\r\n  initialize(): void {\r\n    super.initialize();\r\n\r\n    this.setUrl((<ClickOverlayConfig>this.config).url);\r\n    let element = this.getDomElement();\r\n    element.on('click', function() {\r\n      if (element.data('url')) {\r\n        window.open(element.data('url'), '_blank');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the URL that should be followed when the watermark is clicked.\r\n   * @returns {string} the watermark URL\r\n   */\r\n  getUrl(): string {\r\n    return this.getDomElement().data('url');\r\n  }\r\n\r\n  setUrl(url: string): void {\r\n    if (url === undefined || url == null) {\r\n      url = '';\r\n    }\r\n    this.getDomElement().data('url', url);\r\n  }\r\n}","import {ButtonConfig, Button} from './button';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {Component, ComponentConfig} from './component';\r\n\r\n/**\r\n * Configuration interface for the {@link CloseButton}.\r\n */\r\nexport interface CloseButtonConfig extends ButtonConfig {\r\n  /**\r\n   * The component that should be closed when the button is clicked.\r\n   */\r\n  target: Component<ComponentConfig>;\r\n}\r\n\r\n/**\r\n * A button that closes (hides) a configured component.\r\n */\r\nexport class CloseButton extends Button<CloseButtonConfig> {\r\n\r\n  constructor(config: CloseButtonConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-closebutton',\r\n      text: 'Close'\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = <CloseButtonConfig>this.getConfig();\r\n\r\n    this.onClick.subscribe(function() {\r\n      config.target.hide();\r\n    });\r\n  }\r\n}","import {Guid} from '../guid';\r\nimport {DOM} from '../dom';\r\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * Base configuration interface for a component.\r\n * Should be extended by components that want to add additional configuration options.\r\n */\r\nexport interface ComponentConfig {\r\n  /**\r\n   * The HTML tag name of the component.\r\n   * Default: 'div'\r\n   */\r\n  tag?: string;\r\n  /**\r\n   * The HTML ID of the component.\r\n   * Default: automatically generated with pattern 'ui-id-{guid}'.\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * A prefix to prepend all CSS classes with.\r\n   */\r\n  cssPrefix?: string;\r\n\r\n  /**\r\n   * The CSS classes of the component. This is usually the class from where the component takes its styling.\r\n   */\r\n  cssClass?: string; // 'class' is a reserved keyword, so we need to make the name more complicated\r\n\r\n  /**\r\n   * Additional CSS classes of the component.\r\n   */\r\n  cssClasses?: string[];\r\n\r\n  /**\r\n   * Specifies if the component should be hidden at startup.\r\n   * Default: false\r\n   */\r\n  hidden?: boolean;\r\n}\r\n\r\n/**\r\n * The base class of the UI framework.\r\n * Each component must extend this class and optionally the config interface.\r\n */\r\nexport class Component<Config extends ComponentConfig> {\r\n\r\n  /**\r\n   * The classname that is attached to the element when it is in the hidden state.\r\n   * @type {string}\r\n   */\r\n  private static readonly CLASS_HIDDEN = 'hidden';\r\n\r\n  /**\r\n   * Configuration object of this component.\r\n   */\r\n  protected config: Config;\r\n\r\n  /**\r\n   * The component's DOM element.\r\n   */\r\n  private element: DOM;\r\n\r\n  /**\r\n   * Flag that keeps track of the hidden state.\r\n   */\r\n  private hidden: boolean;\r\n\r\n  /**\r\n   * The list of events that this component offers. These events should always be private and only directly\r\n   * accessed from within the implementing component.\r\n   *\r\n   * Because TypeScript does not support private properties with the same name on different class hierarchy levels\r\n   * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming\r\n   * convention for the event list of a component that should be followed by subclasses is the concatenation of the\r\n   * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).\r\n   * See {@link #componentEvents} for an example.\r\n   *\r\n   * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may\r\n   * have a start event (when the operation starts) in the present tense, and must have an end event (when the\r\n   * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).\r\n   * See {@link #componentEvents#onShow} for an example.\r\n   *\r\n   * Each event should be accompanied with a protected method named by the convention eventName + 'Event'\r\n   * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and\r\n   * passing a reference to the component as first parameter. Components should always trigger their events with these\r\n   * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the\r\n   * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger\r\n   * these events without having access to the private event list.\r\n   * See {@link #onShow} for an example.\r\n   *\r\n   * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),\r\n   * each event should also be accompanied by a public getter function with the same name as the event's property,\r\n   * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.\r\n   * See {@link #onShow} for an example.\r\n   *\r\n   * Full example for an event representing an example action in a example component:\r\n   *\r\n   * <code>\r\n   * // Define an example component class with an example event\r\n   * class ExampleComponent extends Component<ComponentConfig> {\r\n     *\r\n     *     private exampleComponentEvents = {\r\n     *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()\r\n     *     }\r\n     *\r\n     *     // constructor and other stuff...\r\n     *\r\n     *     protected onExampleActionEvent() {\r\n     *        this.exampleComponentEvents.onExampleAction.dispatch(this);\r\n     *    }\r\n     *\r\n     *    get onExampleAction(): Event<ExampleComponent, NoArgs> {\r\n     *        return this.exampleComponentEvents.onExampleAction.getEvent();\r\n     *    }\r\n     * }\r\n   *\r\n   * // Create an instance of the component somewhere\r\n   * var exampleComponentInstance = new ExampleComponent();\r\n   *\r\n   * // Subscribe to the example event on the component\r\n   * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {\r\n     *     console.log('onExampleAction of ' + sender + ' has fired!');\r\n     * });\r\n   * </code>\r\n   */\r\n  private componentEvents = {\r\n    onShow: new EventDispatcher<Component<Config>, NoArgs>(),\r\n    onHide: new EventDispatcher<Component<Config>, NoArgs>()\r\n  };\r\n\r\n  /**\r\n   * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their\r\n   * superclass and then merge their configuration into the component's configuration.\r\n   * @param config the configuration for the component\r\n   */\r\n  constructor(config: ComponentConfig = {}) {\r\n    // Create the configuration for this component\r\n    this.config = <Config>this.mergeConfig(config, {\r\n      tag: 'div',\r\n      id: 'bmpui-id-' + Guid.next(),\r\n      cssPrefix: 'bmpui',\r\n      cssClass: 'ui-component',\r\n      cssClasses: [],\r\n      hidden: false\r\n    }, {});\r\n  }\r\n\r\n  /**\r\n   * Initializes the component, e.g. by applying config settings.\r\n   * This method must not be called from outside the UI framework.\r\n   *\r\n   * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of\r\n   * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,\r\n   * this method must be called from the managing component's {@link #initialize} method.\r\n   */\r\n  initialize(): void {\r\n    this.hidden = this.config.hidden;\r\n\r\n    // Hide the component at initialization if it is configured to be hidden\r\n    if (this.isHidden()) {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic\r\n   * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the\r\n   * UIInstanceManager), and basically everything that makes them interactive.\r\n   * This method is called only once, when the UIManager initializes the UI.\r\n   *\r\n   * Subclasses usually overwrite this method to add their own functionality.\r\n   *\r\n   * @param player the player which this component controls\r\n   * @param uimanager the UIInstanceManager that manages this component\r\n   */\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    let self = this;\r\n\r\n    self.onShow.subscribe(function() {\r\n      uimanager.onComponentShow.dispatch(self);\r\n    });\r\n    self.onHide.subscribe(function() {\r\n      uimanager.onComponentHide.dispatch(self);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate the DOM element for this component.\r\n   *\r\n   * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.\r\n   */\r\n  protected toDomElement(): DOM {\r\n    let element = new DOM(this.config.tag, {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses()\r\n    });\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.\r\n   *\r\n   * Should not be overwritten by subclasses.\r\n   *\r\n   * @returns {DOM}\r\n   */\r\n  getDomElement(): DOM {\r\n    if (!this.element) {\r\n      this.element = this.toDomElement();\r\n    }\r\n\r\n    return this.element;\r\n  }\r\n\r\n  /**\r\n   * Merges a configuration with a default configuration and a base configuration from the superclass.\r\n   *\r\n   * @param config the configuration settings for the components, as usually passed to the constructor\r\n   * @param defaults a default configuration for settings that are not passed with the configuration\r\n   * @param base configuration inherited from a superclass\r\n   * @returns {Config}\r\n   */\r\n  protected mergeConfig<Config>(config: Config, defaults: Config, base: Config): Config {\r\n    // Extend default config with supplied config\r\n    let merged = Object.assign({}, base, defaults, config);\r\n\r\n    // Return the extended config\r\n    return merged;\r\n  }\r\n\r\n  /**\r\n   * Helper method that returns a string of all CSS classes of the component.\r\n   *\r\n   * @returns {string}\r\n   */\r\n  protected getCssClasses(): string {\r\n    let self = this;\r\n    // Merge all CSS classes into single array\r\n    let flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);\r\n    // Prefix classes\r\n    flattenedArray = flattenedArray.map(function(css) {\r\n      return self.prefixCss(css);\r\n    });\r\n    // Join array values into a string\r\n    let flattenedString = flattenedArray.join(' ');\r\n    // Return trimmed string to prevent whitespace at the end from the join operation\r\n    return flattenedString.trim();\r\n  }\r\n\r\n  protected prefixCss(cssClassOrId: string): string {\r\n    return this.config.cssPrefix + '-' + cssClassOrId;\r\n  }\r\n\r\n  /**\r\n   * Returns the configuration object of the component.\r\n   * @returns {Config}\r\n   */\r\n  public getConfig(): Config {\r\n    return this.config;\r\n  }\r\n\r\n  /**\r\n   * Hides the component.\r\n   * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.\r\n   */\r\n  hide() {\r\n    this.hidden = true;\r\n    this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));\r\n    this.onHideEvent();\r\n  }\r\n\r\n  /**\r\n   * Shows the component.\r\n   */\r\n  show() {\r\n    this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));\r\n    this.hidden = false;\r\n    this.onShowEvent();\r\n  }\r\n\r\n  /**\r\n   * Determines if the component is hidden.\r\n   * @returns {boolean} true if the component is hidden, else false\r\n   */\r\n  isHidden(): boolean {\r\n    return this.hidden;\r\n  }\r\n\r\n  /**\r\n   * Determines if the component is shown.\r\n   * @returns {boolean} true if the component is visible, else false\r\n   */\r\n  isShown(): boolean {\r\n    return !this.isHidden();\r\n  }\r\n\r\n  /**\r\n   * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.\r\n   */\r\n  toggleHidden() {\r\n    if (this.isHidden()) {\r\n      this.show();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fires the onShow event.\r\n   * See the detailed explanation on event architecture onj the {@link #componentEvents events list}.\r\n   */\r\n  protected onShowEvent() {\r\n    this.componentEvents.onShow.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Fires the onHide event.\r\n   * See the detailed explanation on event architecture onj the {@link #componentEvents events list}.\r\n   */\r\n  protected onHideEvent() {\r\n    this.componentEvents.onHide.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the component is showing.\r\n   * See the detailed explanation on event architecture onj the {@link #componentEvents events list}.\r\n   * @returns {Event<Component<Config>, NoArgs>}\r\n   */\r\n  get onShow(): Event<Component<Config>, NoArgs> {\r\n    return this.componentEvents.onShow.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the component is hiding.\r\n   * See the detailed explanation on event architecture onj the {@link #componentEvents events list}.\r\n   * @returns {Event<Component<Config>, NoArgs>}\r\n   */\r\n  get onHide(): Event<Component<Config>, NoArgs> {\r\n    return this.componentEvents.onHide.getEvent();\r\n  }\r\n}","import {ComponentConfig, Component} from './component';\r\nimport {DOM} from '../dom';\r\nimport {ArrayUtils} from '../utils';\r\n\r\n/**\r\n * Configuration interface for a {@link Container}.\r\n */\r\nexport interface ContainerConfig extends ComponentConfig {\r\n  /**\r\n   * Child components of the container.\r\n   */\r\n  components?: Component<ComponentConfig>[];\r\n}\r\n\r\n/**\r\n * A container component that can contain a collection of child components.\r\n * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later\r\n * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it\r\n * initializes and configures them automatically.\r\n *\r\n * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper\r\n * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects\r\n * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.\r\n *\r\n * DOM example:\r\n * <code>\r\n *     <div class='ui-container'>\r\n *         <div class='container-wrapper'>\r\n *             ... child components ...\r\n *         </div>\r\n *     </div>\r\n * </code>\r\n */\r\nexport class Container<Config extends ContainerConfig> extends Component<ContainerConfig> {\r\n\r\n  /**\r\n   * A reference to the inner element that contains the components of the container.\r\n   */\r\n  private innerContainerElement: DOM;\r\n\r\n  constructor(config: ContainerConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-container',\r\n      components: []\r\n    }, this.config);\r\n  }\r\n\r\n  /**\r\n   * Adds a child component to the container.\r\n   * @param component the component to add\r\n   */\r\n  addComponent(component: Component<ComponentConfig>) {\r\n    this.config.components.push(component);\r\n  }\r\n\r\n  /**\r\n   * Removes a child component from the container.\r\n   * @param component the component to remove\r\n   * @returns {boolean} true if the component has been removed, false if it is not contained in this container\r\n   */\r\n  removeComponent(component: Component<ComponentConfig>): boolean {\r\n    return ArrayUtils.remove(this.config.components, component) != null;\r\n  }\r\n\r\n  /**\r\n   * Gets an array of all child components in this container.\r\n   * @returns {Component<ComponentConfig>[]}\r\n   */\r\n  getComponents(): Component<ComponentConfig>[] {\r\n    return this.config.components;\r\n  }\r\n\r\n  /**\r\n   * Updates the DOM of the container with the current components.\r\n   */\r\n  protected updateComponents(): void {\r\n    this.innerContainerElement.empty();\r\n\r\n    for (let component of this.config.components) {\r\n      this.innerContainerElement.append(component.getDomElement());\r\n    }\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    // Create the container element (the outer <div>)\r\n    let containerElement = new DOM(this.config.tag, {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses()\r\n    });\r\n\r\n    // Create the inner container element (the inner <div>) that will contain the components\r\n    let innerContainer = new DOM(this.config.tag, {\r\n      'class': this.prefixCss('container-wrapper')\r\n    });\r\n    this.innerContainerElement = innerContainer;\r\n\r\n    this.updateComponents();\r\n\r\n    containerElement.append(innerContainer);\r\n\r\n    return containerElement;\r\n  }\r\n}","import {ContainerConfig, Container} from './container';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * Configuration interface for the {@link ControlBar}.\r\n */\r\nexport interface ControlBarConfig extends ContainerConfig {\r\n  // nothing yet\r\n}\r\n\r\n/**\r\n * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle\r\n * button.\r\n */\r\nexport class ControlBar extends Container<ControlBarConfig> {\r\n\r\n  constructor(config: ControlBarConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-controlbar',\r\n      hidden: true,\r\n    }, <ControlBarConfig>this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    uimanager.onControlsShow.subscribe(function () {\r\n      self.show();\r\n    });\r\n    uimanager.onControlsHide.subscribe(function () {\r\n      self.hide();\r\n    });\r\n  }\r\n}","import {ContainerConfig, Container} from './container';\r\nimport {Label, LabelConfig} from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport ErrorEvent = bitmovin.player.ErrorEvent;\r\nimport {TvNoiseCanvas} from './tvnoisecanvas';\r\n\r\n/**\r\n * Overlays the player and displays error messages.\r\n */\r\nexport class ErrorMessageOverlay extends Container<ContainerConfig> {\r\n\r\n  private errorLabel: Label<LabelConfig>;\r\n  private tvNoiseBackground: TvNoiseCanvas;\r\n\r\n  constructor(config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.errorLabel = new Label<LabelConfig>({ cssClass: 'ui-errormessage-label' });\r\n    this.tvNoiseBackground = new TvNoiseCanvas();\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-errormessage-overlay',\r\n      components: [this.tvNoiseBackground, this.errorLabel],\r\n      hidden: true\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_ERROR, function(event: ErrorEvent) {\r\n      self.errorLabel.setText(event.message);\r\n      self.tvNoiseBackground.start();\r\n      self.show();\r\n    });\r\n  }\r\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * A button that toggles the player between windowed and fullscreen view.\r\n */\r\nexport class FullscreenToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-fullscreentogglebutton',\r\n      text: 'Fullscreen'\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    let fullscreenStateHandler = function() {\r\n      if (player.isFullscreen()) {\r\n        self.on();\r\n      } else {\r\n        self.off();\r\n      }\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_FULLSCREEN_ENTER, fullscreenStateHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_FULLSCREEN_EXIT, fullscreenStateHandler);\r\n\r\n    self.onClick.subscribe(function() {\r\n      if (player.isFullscreen()) {\r\n        player.exitFullscreen();\r\n      } else {\r\n        player.enterFullscreen();\r\n      }\r\n    });\r\n\r\n    // Startup init\r\n    fullscreenStateHandler();\r\n  }\r\n}","import {ToggleButtonConfig} from './togglebutton';\r\nimport {PlaybackToggleButton} from './playbacktogglebutton';\r\nimport {DOM} from '../dom';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport PlayerEvent = bitmovin.player.PlayerEvent;\r\n\r\n/**\r\n * A button that overlays the video and toggles between playback and pause.\r\n */\r\nexport class HugePlaybackToggleButton extends PlaybackToggleButton {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-hugeplaybacktogglebutton',\r\n      text: 'Play/Pause'\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    // Update button state through API events\r\n    super.configure(player, uimanager, false);\r\n\r\n    let self = this;\r\n\r\n    let togglePlayback = function() {\r\n      if (player.isPlaying()) {\r\n        player.pause('ui-overlay');\r\n      } else {\r\n        player.play('ui-overlay');\r\n      }\r\n    };\r\n\r\n    let toggleFullscreen = function() {\r\n      if (player.isFullscreen()) {\r\n        player.exitFullscreen();\r\n      } else {\r\n        player.enterFullscreen();\r\n      }\r\n    };\r\n\r\n    let firstClick = true;\r\n    let clickTime = 0;\r\n    let doubleClickTime = 0;\r\n\r\n    /*\r\n     * YouTube-style toggle button handling\r\n     *\r\n     * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a\r\n     * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,\r\n     * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop\r\n     * playback, which results is a short playback interval with max length of the double click detection\r\n     * period (usually 500ms).\r\n     *\r\n     * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,\r\n     * and just toggle playback if no second click (double click) has been registered during this period. If a double\r\n     * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot\r\n     * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.\r\n     * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented\r\n     * if a double click happens.\r\n     */\r\n    self.onClick.subscribe(function() {\r\n      // Directly start playback on first click of the button.\r\n      // This is a required workaround for mobile browsers where video playback needs to be triggered directly\r\n      // by the user. A deferred playback start through the timeout below is not considered as user action and\r\n      // therefore ignored by mobile browsers.\r\n      if (firstClick) {\r\n        togglePlayback();\r\n        firstClick = false;\r\n        return;\r\n      }\r\n\r\n      let now = Date.now();\r\n\r\n      if (now - clickTime < 200) {\r\n        // We have a double click inside the 200ms interval, just toggle fullscreen mode\r\n        toggleFullscreen();\r\n        doubleClickTime = now;\r\n        return;\r\n      } else if (now - clickTime < 500) {\r\n        // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode\r\n        toggleFullscreen();\r\n        togglePlayback();\r\n        doubleClickTime = now;\r\n        return;\r\n      }\r\n\r\n      clickTime = now;\r\n\r\n      setTimeout(function() {\r\n        if (Date.now() - doubleClickTime > 200) {\r\n          // No double click detected, so we toggle playback and wait what happens next\r\n          togglePlayback();\r\n        }\r\n      }, 200);\r\n    });\r\n\r\n    // Hide button while initializing a Cast session\r\n    let castInitializationHandler = function(event: PlayerEvent) {\r\n      if (event.type === bitmovin.player.EVENT.ON_CAST_STARTED) {\r\n        // Hide button when session is being initialized\r\n        self.hide();\r\n      } else {\r\n        // Show button when session is established or initialization was aborted\r\n        self.show();\r\n      }\r\n    };\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_START, castInitializationHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_STARTED, castInitializationHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_STOPPED, castInitializationHandler);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let buttonElement = super.toDomElement();\r\n\r\n    // Add child that contains the play button image\r\n    // Setting the image directly on the button does not work together with scaling animations, because the button\r\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\r\n    // to the size if the image, it can scale inside the player without overshooting.\r\n    buttonElement.append(new DOM('div', {\r\n      'class': this.prefixCss('image')\r\n    }));\r\n\r\n    return buttonElement;\r\n  }\r\n}","import {ButtonConfig, Button} from './button';\r\nimport {DOM} from '../dom';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport PlayerEvent = bitmovin.player.PlayerEvent;\r\n\r\n/**\r\n * A button to play/replay a video.\r\n */\r\nexport class HugeReplayButton extends Button<ButtonConfig> {\r\n\r\n  constructor(config: ButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-hugereplaybutton',\r\n      text: 'Replay'\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.onClick.subscribe(function() {\r\n      player.play('ui-overlay');\r\n    });\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let buttonElement = super.toDomElement();\r\n\r\n    // Add child that contains the play button image\r\n    // Setting the image directly on the button does not work together with scaling animations, because the button\r\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\r\n    // to the size if the image, it can scale inside the player without overshooting.\r\n    buttonElement.append(new DOM('div', {\r\n      'class': this.prefixCss('image')\r\n    }));\r\n\r\n    return buttonElement;\r\n  }\r\n}","import {ComponentConfig, Component} from './component';\r\nimport {DOM} from '../dom';\r\nimport {EventDispatcher, Event, NoArgs} from '../eventdispatcher';\r\n\r\n/**\r\n * Configuration interface for a {@link Label} component.\r\n */\r\nexport interface LabelConfig extends ComponentConfig {\r\n  /**\r\n   * The text on the label.\r\n   */\r\n  text?: string;\r\n}\r\n\r\n/**\r\n * A simple text label.\r\n *\r\n * DOM example:\r\n * <code>\r\n *     <span class='ui-label'>...some text...</span>\r\n * </code>\r\n */\r\nexport class Label<Config extends LabelConfig> extends Component<LabelConfig> {\r\n\r\n  private labelEvents = {\r\n    onClick: new EventDispatcher<Label<Config>, NoArgs>()\r\n  };\r\n\r\n  constructor(config: LabelConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-label'\r\n    }, this.config);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let self = this;\r\n\r\n    let labelElement = new DOM('span', {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses()\r\n    }).html(this.config.text);\r\n\r\n    labelElement.on('click', function() {\r\n      self.onClickEvent();\r\n    });\r\n\r\n    return labelElement;\r\n  }\r\n\r\n  /**\r\n   * Set the text on this label.\r\n   * @param text\r\n   */\r\n  setText(text: string) {\r\n    this.getDomElement().html(text);\r\n  }\r\n\r\n  /**\r\n   * Clears the text on this label.\r\n   */\r\n  clearText() {\r\n    this.getDomElement().html('');\r\n  }\r\n\r\n  protected onClickEvent() {\r\n    this.labelEvents.onClick.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the label is clicked.\r\n   * @returns {Event<Label<LabelConfig>, NoArgs>}\r\n   */\r\n  get onClick(): Event<Label<LabelConfig>, NoArgs> {\r\n    return this.labelEvents.onClick.getEvent();\r\n  }\r\n}","import {Component, ComponentConfig} from './component';\r\nimport {EventDispatcher, Event} from '../eventdispatcher';\r\nimport {ArrayUtils} from '../utils';\r\n\r\n/**\r\n * A map of items (key/value -> label} for a {@link ListSelector} in a {@link ListSelectorConfig}.\r\n */\r\nexport interface ListItem {\r\n  key: string;\r\n  label: string;\r\n}\r\n\r\n/**\r\n * Configuration interface for a {@link ListSelector}.\r\n */\r\nexport interface ListSelectorConfig extends ComponentConfig {\r\n  items?: ListItem[];\r\n}\r\n\r\nexport abstract class ListSelector<Config extends ListSelectorConfig> extends Component<ListSelectorConfig> {\r\n\r\n  protected items: ListItem[];\r\n  protected selectedItem: string;\r\n\r\n  private listSelectorEvents = {\r\n    onItemAdded: new EventDispatcher<ListSelector<Config>, string>(),\r\n    onItemRemoved: new EventDispatcher<ListSelector<Config>, string>(),\r\n    onItemSelected: new EventDispatcher<ListSelector<Config>, string>()\r\n  };\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      items: [],\r\n      cssClass: 'ui-listselector'\r\n    }, this.config);\r\n\r\n    this.items = this.config.items;\r\n  }\r\n\r\n  private getItemIndex(key: string): number {\r\n    for (let index in this.items) {\r\n      if (key === this.items[index].key) {\r\n        return parseInt(index);\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Checks if the specified item is part of this selector.\r\n   * @param key the key of the item to check\r\n   * @returns {boolean} true if the item is part of this selector, else false\r\n   */\r\n  hasItem(key: string): boolean {\r\n    return this.getItemIndex(key) > -1;\r\n  }\r\n\r\n  /**\r\n   * Adds an item to this selector by appending it to the end of the list of items. If an item with the specified\r\n   * key already exists, it is replaced.\r\n   * @param key the key of the item to add\r\n   * @param label the (human-readable) label of the item to add\r\n   */\r\n  addItem(key: string, label: string) {\r\n    this.removeItem(key); // Try to remove key first to get overwrite behavior and avoid duplicate keys\r\n    this.items.push({ key: key, label: label });\r\n    this.onItemAddedEvent(key);\r\n  }\r\n\r\n  /**\r\n   * Removes an item from this selector.\r\n   * @param key the key of the item to remove\r\n   * @returns {boolean} true if removal was successful, false if the item is not part of this selector\r\n   */\r\n  removeItem(key: string): boolean {\r\n    let index = this.getItemIndex(key);\r\n    if (index > -1) {\r\n      ArrayUtils.remove(this.items, this.items[index]);\r\n      this.onItemRemovedEvent(key);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Selects an item from the items in this selector.\r\n   * @param key the key of the item to select\r\n   * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector\r\n   */\r\n  selectItem(key: string): boolean {\r\n    if (key === this.selectedItem) {\r\n      // itemConfig is already selected, suppress any further action\r\n      return true;\r\n    }\r\n\r\n    let index = this.getItemIndex(key);\r\n\r\n    if (index > -1) {\r\n      this.selectedItem = key;\r\n      this.onItemSelectedEvent(key);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns the key of the selected item.\r\n   * @returns {string} the key of the selected item or null if no item is selected\r\n   */\r\n  getSelectedItem(): string | null {\r\n    return this.selectedItem;\r\n  }\r\n\r\n  /**\r\n   * Removes all items from this selector.\r\n   */\r\n  clearItems() {\r\n    let items = this.items; // local copy for iteration after clear\r\n    this.items = []; // clear items\r\n\r\n    // fire events\r\n    for (let item of items) {\r\n      this.onItemRemovedEvent(item.key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of items in this selector.\r\n   * @returns {number}\r\n   */\r\n  itemCount(): number {\r\n    return Object.keys(this.items).length;\r\n  }\r\n\r\n  protected onItemAddedEvent(key: string) {\r\n    this.listSelectorEvents.onItemAdded.dispatch(this, key);\r\n  }\r\n\r\n  protected onItemRemovedEvent(key: string) {\r\n    this.listSelectorEvents.onItemRemoved.dispatch(this, key);\r\n  }\r\n\r\n  protected onItemSelectedEvent(key: string) {\r\n    this.listSelectorEvents.onItemSelected.dispatch(this, key);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when an item is added to the list of items.\r\n   * @returns {Event<ListSelector<Config>, string>}\r\n   */\r\n  get onItemAdded(): Event<ListSelector<Config>, string> {\r\n    return this.listSelectorEvents.onItemAdded.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when an item is removed from the list of items.\r\n   * @returns {Event<ListSelector<Config>, string>}\r\n   */\r\n  get onItemRemoved(): Event<ListSelector<Config>, string> {\r\n    return this.listSelectorEvents.onItemRemoved.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when an item is selected from the list of items.\r\n   * @returns {Event<ListSelector<Config>, string>}\r\n   */\r\n  get onItemSelected(): Event<ListSelector<Config>, string> {\r\n    return this.listSelectorEvents.onItemSelected.getEvent();\r\n  }\r\n}","import {LabelConfig, Label} from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * Enumerates the types of content that the {@link MetadataLabel} can display.\r\n */\r\nexport enum MetadataLabelContent {\r\n  /**\r\n   * Title of the data source.\r\n   */\r\n  Title,\r\n  /**\r\n   * Description fo the data source.\r\n   */\r\n  Description,\r\n}\r\n\r\n/**\r\n * Configuration interface for {@link MetadataLabel}.\r\n */\r\nexport interface MetadataLabelConfig extends LabelConfig {\r\n  /**\r\n   * The type of content that should be displayed in the label.\r\n   */\r\n  content: MetadataLabelContent;\r\n}\r\n\r\n/**\r\n * A label that can be configured to display certain metadata.\r\n */\r\nexport class MetadataLabel extends Label<MetadataLabelConfig> {\r\n\r\n  constructor(config: MetadataLabelConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()]\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = <MetadataLabelConfig>this.getConfig();\r\n    let uiconfig = uimanager.getConfig();\r\n\r\n    switch (config.content) {\r\n      case MetadataLabelContent.Title:\r\n        if (uiconfig && uiconfig.metadata && uiconfig.metadata.title) {\r\n          this.setText(uiconfig.metadata.title);\r\n        }\r\n        break;\r\n      case MetadataLabelContent.Description:\r\n        if (uiconfig && uiconfig.metadata && uiconfig.metadata.description) {\r\n          this.setText(uiconfig.metadata.description);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n}","import {SelectBox} from './selectbox';\r\nimport {ListSelectorConfig} from './listselector';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * A select box providing a selection of different playback speeds.\r\n */\r\nexport class PlaybackSpeedSelectBox extends SelectBox {\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    self.addItem('0.25', '0.25x');\r\n    self.addItem('0.5', '0.5x');\r\n    self.addItem('1', 'Normal');\r\n    self.addItem('1.5', '1.5x');\r\n    self.addItem('2', '2x');\r\n\r\n    self.selectItem('1');\r\n\r\n\r\n    self.onItemSelected.subscribe(function(sender: PlaybackSpeedSelectBox, value: string) {\r\n      player.setPlaybackSpeed(parseFloat(value));\r\n    });\r\n  }\r\n}","import {LabelConfig, Label} from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {StringUtils} from '../utils';\r\n\r\nexport enum PlaybackTimeLabelMode {\r\n  CurrentTime,\r\n  TotalTime,\r\n  CurrentAndTotalTime,\r\n}\r\n\r\nexport interface PlaybackTimeLabelConfig extends LabelConfig {\r\n  timeLabelMode?: PlaybackTimeLabelMode;\r\n  hideInLivePlayback?: boolean;\r\n}\r\n\r\n/**\r\n * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}\r\n * or any string through {@link PlaybackTimeLabel#setText setText}.\r\n */\r\nexport class PlaybackTimeLabel extends Label<PlaybackTimeLabelConfig> {\r\n\r\n  private timeFormat: string;\r\n\r\n  constructor(config: PlaybackTimeLabelConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, <PlaybackTimeLabelConfig>{\r\n      cssClass: 'ui-playbacktimelabel',\r\n      timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,\r\n      hideInLivePlayback: false,\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n    let config = <PlaybackTimeLabelConfig>self.getConfig();\r\n    let live = false;\r\n    let liveCssClass = self.prefixCss('ui-playbacktimelabel-live');\r\n    let liveEdgeCssClass = self.prefixCss('ui-playbacktimelabel-live-edge');\r\n    let minWidth = 0;\r\n\r\n    let liveClickHandler = function() {\r\n      player.timeShift(0);\r\n    };\r\n\r\n    let updateLiveState = function() {\r\n      // Player is playing a live stream when the duration is infinite\r\n      live = (player.getDuration() === Infinity);\r\n\r\n      // Attach/detach live marker class\r\n      if (live) {\r\n        self.getDomElement().addClass(liveCssClass);\r\n        self.setText('Live');\r\n        if (config.hideInLivePlayback) {\r\n          self.hide();\r\n        }\r\n        self.onClick.subscribe(liveClickHandler);\r\n        updateLiveTimeshiftState();\r\n      } else {\r\n        self.getDomElement().removeClass(liveCssClass);\r\n        self.getDomElement().removeClass(liveEdgeCssClass);\r\n        self.show();\r\n        self.onClick.unsubscribe(liveClickHandler);\r\n      }\r\n    };\r\n\r\n    let updateLiveTimeshiftState = function() {\r\n      if (player.getTimeShift() === 0) {\r\n        self.getDomElement().addClass(liveEdgeCssClass);\r\n      } else {\r\n        self.getDomElement().removeClass(liveEdgeCssClass);\r\n      }\r\n    };\r\n\r\n    let playbackTimeHandler = function() {\r\n      if ((player.getDuration() === Infinity) !== live) {\r\n        updateLiveState();\r\n      }\r\n\r\n      if (!live) {\r\n        self.setTime(player.getCurrentTime(), player.getDuration());\r\n      }\r\n\r\n      // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,\r\n      // we gradually increase the min-width with the content to reach a stable size.\r\n      let width = self.getDomElement().width();\r\n      if (width > minWidth) {\r\n        minWidth = width;\r\n        self.getDomElement().css({\r\n          'min-width': minWidth + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_TIME_CHANGED, playbackTimeHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SEEKED, playbackTimeHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_TIME_UPDATED, playbackTimeHandler);\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_TIME_SHIFT, updateLiveTimeshiftState);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_TIME_SHIFTED, updateLiveTimeshiftState);\r\n\r\n    let init = function() {\r\n      // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content\r\n      // changes)\r\n      minWidth = 0;\r\n      self.getDomElement().css({\r\n        'min-width': null\r\n      });\r\n\r\n      // Set time format depending on source duration\r\n      self.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\r\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\r\n\r\n      // Update time after the format has been set\r\n      playbackTimeHandler();\r\n    };\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_READY, init);\r\n\r\n    init();\r\n  }\r\n\r\n  /**\r\n   * Sets the current playback time and total duration.\r\n   * @param playbackSeconds the current playback time in seconds\r\n   * @param durationSeconds the total duration in seconds\r\n   */\r\n  setTime(playbackSeconds: number, durationSeconds: number) {\r\n    let currentTime = StringUtils.secondsToTime(playbackSeconds, this.timeFormat);\r\n    let totalTime = StringUtils.secondsToTime(durationSeconds, this.timeFormat);\r\n\r\n    switch ((<PlaybackTimeLabelConfig>this.config).timeLabelMode) {\r\n      case PlaybackTimeLabelMode.CurrentTime:\r\n        this.setText(`${currentTime}`);\r\n        break;\r\n      case PlaybackTimeLabelMode.TotalTime:\r\n        this.setText(`${totalTime}`);\r\n        break;\r\n      case PlaybackTimeLabelMode.CurrentAndTotalTime:\r\n        this.setText(`${currentTime} / ${totalTime}`);\r\n        break;\r\n    }\r\n  }\r\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport PlayerEvent = bitmovin.player.PlayerEvent;\r\n\r\n/**\r\n * A button that toggles between playback and pause.\r\n */\r\nexport class PlaybackToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-playbacktogglebutton',\r\n      text: 'Play/Pause'\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager, handleClickEvent: boolean = true): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n    let isSeeking = false;\r\n\r\n    // Handler to update button state based on player state\r\n    let playbackStateHandler = function(event: PlayerEvent) {\r\n      // If the UI is currently seeking, playback is temporarily stopped but the buttons should\r\n      // not reflect that and stay as-is (e.g indicate playback while seeking).\r\n      if (isSeeking) {\r\n        return;\r\n      }\r\n\r\n      // TODO replace this hack with a sole player.isPlaying() call once issue #1203 is fixed\r\n      let isPlaying = player.isPlaying();\r\n      if (player.isCasting() && event &&\r\n        (event.type === bitmovin.player.EVENT.ON_PLAY\r\n        || event.type === bitmovin.player.EVENT.ON_PAUSED\r\n        || event.type === bitmovin.player.EVENT.ON_CAST_PLAYING\r\n        || event.type === bitmovin.player.EVENT.ON_CAST_PAUSED)) {\r\n        isPlaying = !isPlaying;\r\n      }\r\n\r\n      if (isPlaying) {\r\n        self.on();\r\n      } else {\r\n        self.off();\r\n      }\r\n    };\r\n\r\n    // Call handler upon these events\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PLAY, playbackStateHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PAUSED, playbackStateHandler);\r\n    // when playback finishes, player turns to paused mode\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PLAYBACK_FINISHED, playbackStateHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_STARTED, playbackStateHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_PLAYING, playbackStateHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_PAUSED, playbackStateHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_PLAYBACK_FINISHED, playbackStateHandler);\r\n\r\n    if (handleClickEvent) {\r\n      // Control player by button events\r\n      // When a button event triggers a player API call, events are fired which in turn call the event handler\r\n      // above that updated the button state.\r\n      self.onClick.subscribe(function() {\r\n        if (player.isPlaying()) {\r\n          player.pause('ui-button');\r\n        } else {\r\n          player.play('ui-button');\r\n        }\r\n      });\r\n    }\r\n\r\n    // Track UI seeking status\r\n    uimanager.onSeek.subscribe(function() {\r\n      isSeeking = true;\r\n    });\r\n    uimanager.onSeeked.subscribe(function() {\r\n      isSeeking = false;\r\n    });\r\n\r\n    // Startup init\r\n    playbackStateHandler(null);\r\n  }\r\n}","import {Container, ContainerConfig} from './container';\r\nimport {HugePlaybackToggleButton} from './hugeplaybacktogglebutton';\r\n\r\n/**\r\n * Overlays the player and displays error messages.\r\n */\r\nexport class PlaybackToggleOverlay extends Container<ContainerConfig> {\r\n\r\n  private playbackToggleButton: HugePlaybackToggleButton;\r\n\r\n  constructor(config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.playbackToggleButton = new HugePlaybackToggleButton();\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-playbacktoggle-overlay',\r\n      components: [this.playbackToggleButton]\r\n    }, this.config);\r\n  }\r\n}","import {ContainerConfig, Container} from './container';\r\nimport {Component, ComponentConfig} from './component';\r\nimport {DOM} from '../dom';\r\nimport {UIInstanceManager, UIRecommendationConfig} from '../uimanager';\r\nimport {StringUtils} from '../utils';\r\nimport {HugeReplayButton} from './hugereplaybutton';\r\n\r\n/**\r\n * Overlays the player and displays recommended videos.\r\n */\r\nexport class RecommendationOverlay extends Container<ContainerConfig> {\r\n\r\n  private replayButton: HugeReplayButton;\r\n\r\n  constructor(config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.replayButton = new HugeReplayButton();\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-recommendation-overlay',\r\n      hidden: true,\r\n      components: [this.replayButton]\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    if (uimanager.getConfig().recommendations && uimanager.getConfig().recommendations.length > 0) {\r\n      let index = 1;\r\n      for (let item of uimanager.getConfig().recommendations) {\r\n        this.addComponent(new RecommendationItem({\r\n          itemConfig: item,\r\n          cssClasses: ['recommendation-item-' + (index++)]\r\n        }));\r\n      }\r\n      this.updateComponents(); // create container DOM elements\r\n\r\n      this.getDomElement().addClass(this.prefixCss('recommendations'));\r\n    }\r\n\r\n    // Display recommendations when playback has finished\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PLAYBACK_FINISHED, function() {\r\n      // Dismiss ON_PLAYBACK_FINISHED events at the end of ads\r\n      // TODO remove this workaround once issue #1278 is solved\r\n      if (player.isAd()) {\r\n        return;\r\n      }\r\n\r\n      self.show();\r\n    });\r\n    // Hide recommendations when playback starts, e.g. a restart\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PLAY, function() {\r\n      self.hide();\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Configuration interface for the {@link RecommendationItem}\r\n */\r\ninterface RecommendationItemConfig extends ComponentConfig {\r\n  itemConfig: UIRecommendationConfig;\r\n}\r\n\r\n/**\r\n * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.\r\n */\r\nclass RecommendationItem extends Component<RecommendationItemConfig> {\r\n\r\n  constructor(config: RecommendationItemConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-recommendation-item',\r\n      itemConfig: null // this must be passed in from outside\r\n    }, this.config);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let config = (<RecommendationItemConfig>this.config).itemConfig; // TODO fix generics and get rid of cast\r\n\r\n    let itemElement = new DOM('a', {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses(),\r\n      'href': config.url\r\n    }).css({ 'background-image': `url(${config.thumbnail})` });\r\n\r\n    let bgElement = new DOM('div', {\r\n      'class': this.prefixCss('background')\r\n    });\r\n    itemElement.append(bgElement);\r\n\r\n    let titleElement = new DOM('span', {\r\n      'class': this.prefixCss('title')\r\n    }).append(new DOM('span', {\r\n      'class': this.prefixCss('innertitle')\r\n    }).html(config.title));\r\n    itemElement.append(titleElement);\r\n\r\n    let timeElement = new DOM('span', {\r\n      'class': this.prefixCss('duration')\r\n    }).append(new DOM('span', {\r\n      'class': this.prefixCss('innerduration')\r\n    }).html(config.duration ? StringUtils.secondsToTime(config.duration) : ''));\r\n    itemElement.append(timeElement);\r\n\r\n    return itemElement;\r\n  }\r\n}","import {Component, ComponentConfig} from './component';\r\nimport {DOM} from '../dom';\r\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\r\nimport {SeekBarLabel} from './seekbarlabel';\r\nimport {UIInstanceManager, TimelineMarker, SeekPreviewArgs} from '../uimanager';\r\nimport {Timeout} from '../timeout';\r\n\r\n/**\r\n * Configuration interface for the {@link SeekBar} component.\r\n */\r\nexport interface SeekBarConfig extends ComponentConfig {\r\n  /**\r\n   * The label above the seek position.\r\n   */\r\n  label?: SeekBarLabel;\r\n  /**\r\n   * Bar will be vertical instead of horizontal if set to true.\r\n   */\r\n  vertical?: boolean;\r\n}\r\n\r\n/**\r\n * Event argument interface for a seek preview event.\r\n */\r\nexport interface SeekPreviewEventArgs extends SeekPreviewArgs {\r\n  /**\r\n   * Tells if the seek preview event comes from a scrubbing.\r\n   */\r\n  scrubbing: boolean;\r\n}\r\n\r\n/**\r\n * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek\r\n * target, and keeps status about an ongoing seek.\r\n *\r\n * The seek bar displays different 'bars':\r\n *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned\r\n *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead\r\n *  - the seek position, used to preview to where in the timeline a seek will jump to\r\n */\r\nexport class SeekBar extends Component<SeekBarConfig> {\r\n\r\n  /**\r\n   * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.\r\n   */\r\n  private static readonly CLASS_SEEKING = 'seeking';\r\n\r\n  private seekBar: DOM;\r\n  private seekBarPlaybackPosition: DOM;\r\n  private seekBarPlaybackPositionMarker: DOM;\r\n  private seekBarBufferPosition: DOM;\r\n  private seekBarSeekPosition: DOM;\r\n  private seekBarBackdrop: DOM;\r\n  private seekBarMarkersContainer: DOM;\r\n\r\n  private label: SeekBarLabel;\r\n\r\n  private timelineMarkers: TimelineMarker[];\r\n\r\n  /**\r\n   * Buffer of the the current playback position. The position must be buffered in case it needs the element\r\n   * needs to be refreshed with {@link #refreshPlaybackPosition}.\r\n   * @type {number}\r\n   */\r\n  private playbackPositionPercentage = 0;\r\n\r\n  // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/\r\n  private touchSupported = ('ontouchstart' in window);\r\n\r\n  private seekBarEvents = {\r\n    /**\r\n     * Fired when a scrubbing seek operation is started.\r\n     */\r\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\r\n    /**\r\n     * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.\r\n     */\r\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewEventArgs>(),\r\n    /**\r\n     * Fired when a scrubbing seek has finished or when a direct seek is issued.\r\n     */\r\n    onSeeked: new EventDispatcher<SeekBar, number>()\r\n  };\r\n\r\n  constructor(config: SeekBarConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-seekbar'\r\n    }, this.config);\r\n\r\n    this.label = this.config.label;\r\n    this.timelineMarkers = [];\r\n  }\r\n\r\n  initialize(): void {\r\n    super.initialize();\r\n\r\n    if (this.hasLabel()) {\r\n      this.getLabel().initialize();\r\n    }\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager, configureSeek: boolean = true): void {\r\n    super.configure(player, uimanager);\r\n\r\n    if (!configureSeek) {\r\n      // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume\r\n      // slider is reusing this component but adds its own functionality, and does not need the seek functionality.\r\n      // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend\r\n      // a common base slider component and implement their functionality there.\r\n      return;\r\n    }\r\n\r\n    if (uimanager.getConfig().metadata && uimanager.getConfig().metadata.markers\r\n      && uimanager.getConfig().metadata.markers.length > 0) {\r\n      for (let chapter of uimanager.getConfig().metadata.markers) {\r\n        this.timelineMarkers.push({\r\n          time: 100 / player.getDuration() * chapter.time, // convert time to percentage\r\n          title: chapter.title,\r\n        })\r\n      }\r\n    }\r\n\r\n    let self = this;\r\n    let playbackNotInitialized = true;\r\n    let isPlaying = false;\r\n    let isSeeking = false;\r\n\r\n    // Update playback and buffer positions\r\n    let playbackPositionHandler = function() {\r\n      // Once this handler os called, playback has been started and we set the flag to false\r\n      playbackNotInitialized = false;\r\n\r\n      if (isSeeking) {\r\n        // We caught a seek preview seek, do not update the seekbar\r\n        return;\r\n      }\r\n\r\n      if (player.isLive()) {\r\n        if (player.getMaxTimeShift() === 0) {\r\n          // This case must be explicitly handled to avoid division by zero\r\n          self.setPlaybackPosition(100);\r\n        }\r\n        else {\r\n          let playbackPositionPercentage = 100 - (100 / player.getMaxTimeShift() * player.getTimeShift());\r\n          self.setPlaybackPosition(playbackPositionPercentage);\r\n        }\r\n\r\n        // Always show full buffer for live streams\r\n        self.setBufferPosition(100);\r\n      }\r\n      else {\r\n        let playbackPositionPercentage = 100 / player.getDuration() * player.getCurrentTime();\r\n\r\n        let videoBufferLength = player.getVideoBufferLength();\r\n        let audioBufferLength = player.getAudioBufferLength();\r\n        // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these\r\n        // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken\r\n        // as the buffer length.\r\n        let bufferLength = Math.min(\r\n          videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE,\r\n          audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);\r\n        // If both buffer lengths are missing, we set the buffer length to zero\r\n        if (bufferLength === Number.MAX_VALUE) {\r\n          bufferLength = 0;\r\n        }\r\n\r\n        let bufferPercentage = 100 / player.getDuration() * bufferLength;\r\n\r\n        // Update playback position only in paused state, playback updates are handled in the Timeout below\r\n        if (player.isPaused()) {\r\n          self.setPlaybackPosition(playbackPositionPercentage);\r\n        }\r\n\r\n        self.setBufferPosition(playbackPositionPercentage + bufferPercentage);\r\n      }\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_READY, function() {\r\n      // Reset flag when a new source is loaded\r\n      playbackNotInitialized = true;\r\n    });\r\n\r\n    // Update seekbar upon these events\r\n    // update playback position when it changes\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_TIME_CHANGED, playbackPositionHandler);\r\n    // update bufferlevel when buffering is complete\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_STALL_ENDED, playbackPositionHandler);\r\n    // update playback position when a seek has finished\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SEEKED, playbackPositionHandler);\r\n    // update playback position when a timeshift has finished\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_TIME_SHIFTED, playbackPositionHandler);\r\n    // update bufferlevel when a segment has been downloaded\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SEGMENT_REQUEST_FINISHED, playbackPositionHandler);\r\n    // update playback position of Cast playback\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CAST_TIME_UPDATED, playbackPositionHandler);\r\n\r\n\r\n    /*\r\n     * Playback position update\r\n     *\r\n     * We do not update the position directly from the ON_TIME_CHANGED event, because it arrives very jittery and\r\n     * results in a jittery position indicator since the CSS transition time is statically set.\r\n     * To work around this issue, we maintain a local playback position that is updated in a stable regular interval\r\n     * and kept in sync with the player.\r\n     */\r\n    let currentTimeSeekBar = 0;\r\n    let currentTimePlayer = 0;\r\n    let updateIntervalMs = 25;\r\n    let currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;\r\n\r\n    let smoothPlaybackPositionUpdater = new Timeout(updateIntervalMs, function() {\r\n      currentTimeSeekBar += currentTimeUpdateDeltaSecs;\r\n      currentTimePlayer = player.getCurrentTime();\r\n\r\n      // Sync currentTime of seekbar to player\r\n      let currentTimeDelta = currentTimeSeekBar - currentTimePlayer;\r\n      // If currentTimeDelta is negative and below the adjustment threshold,\r\n      // the player is ahead of the seekbar and we 'fast forward' the seekbar\r\n      if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {\r\n        currentTimeSeekBar += currentTimeUpdateDeltaSecs;\r\n      }\r\n      // If currentTimeDelta is positive and above the adjustment threshold,\r\n      // the player is behind the seekbar and we 'rewind' the seekbar\r\n      else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {\r\n        currentTimeSeekBar -= currentTimeUpdateDeltaSecs;\r\n      }\r\n\r\n      let playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;\r\n      self.setPlaybackPosition(playbackPositionPercentage);\r\n    }, true);\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PLAY, function() {\r\n      if (!player.isLive()) {\r\n        currentTimeSeekBar = player.getCurrentTime();\r\n        smoothPlaybackPositionUpdater.start();\r\n      }\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PAUSED, function() {\r\n      smoothPlaybackPositionUpdater.clear();\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SEEKED, function() {\r\n      currentTimeSeekBar = player.getCurrentTime();\r\n    });\r\n\r\n\r\n    // Seek handling\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SEEK, function() {\r\n      self.setSeeking(true);\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SEEKED, function() {\r\n      self.setSeeking(false);\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_TIME_SHIFT, function() {\r\n      self.setSeeking(true);\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_TIME_SHIFTED, function() {\r\n      self.setSeeking(false);\r\n    });\r\n\r\n    let seek = function(percentage: number) {\r\n      if (player.isLive()) {\r\n        player.timeShift(player.getMaxTimeShift() - (player.getMaxTimeShift() * (percentage / 100)));\r\n      } else {\r\n        player.seek(player.getDuration() * (percentage / 100));\r\n      }\r\n    };\r\n    self.onSeek.subscribe(function(sender) {\r\n      isSeeking = true; // track seeking status so we can catch events from seek preview seeks\r\n\r\n      // Notify UI manager of started seek\r\n      uimanager.onSeek.dispatch(sender);\r\n\r\n      // Save current playback state\r\n      isPlaying = player.isPlaying();\r\n\r\n      // Pause playback while seeking\r\n      if (isPlaying) {\r\n        player.pause('ui-seek');\r\n      }\r\n    });\r\n    self.onSeekPreview.subscribe(function(sender: SeekBar, args: SeekPreviewEventArgs) {\r\n      // Notify UI manager of seek preview\r\n      uimanager.onSeekPreview.dispatch(sender, args);\r\n    });\r\n    self.onSeekPreview.subscribeRateLimited(function(sender: SeekBar, args: SeekPreviewEventArgs) {\r\n      // Rate-limited scrubbing seek\r\n      if (args.scrubbing) {\r\n        seek(args.position);\r\n      }\r\n    }, 200);\r\n    self.onSeeked.subscribe(function(sender, percentage) {\r\n      isSeeking = false;\r\n\r\n      // If playback has not been started before, we need to call play to in it the playback engine for the\r\n      // seek to work. We call pause() immediately afterwards because we actually do not want to play back anything.\r\n      // The flag serves to call play/pause only on the first seek before playback has started, instead of every\r\n      // time a seek is issued.\r\n      if (playbackNotInitialized) {\r\n        playbackNotInitialized = false;\r\n        player.play('ui-seek');\r\n        player.pause('ui-seek');\r\n      }\r\n\r\n      // Do the seek\r\n      seek(percentage);\r\n\r\n      // Continue playback after seek if player was playing when seek started\r\n      if (isPlaying) {\r\n        player.play('ui-seek');\r\n      }\r\n\r\n      // Notify UI manager of finished seek\r\n      uimanager.onSeeked.dispatch(sender);\r\n    });\r\n\r\n    if (self.hasLabel()) {\r\n      // Configure a seekbar label that is internal to the seekbar)\r\n      self.getLabel().configure(player, uimanager);\r\n    }\r\n\r\n    // Hide seekbar for live sources without timeshift\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_READY, function() {\r\n      if (player.isLive() && player.getMaxTimeShift() === 0) {\r\n        self.hide();\r\n      } else {\r\n        self.show();\r\n      }\r\n    });\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PLAYER_RESIZE, function() {\r\n      self.refreshPlaybackPosition();\r\n    });\r\n\r\n    // Initialize seekbar\r\n    this.setPlaybackPosition(0);\r\n    this.setBufferPosition(0);\r\n    this.setSeekPosition(0);\r\n    this.updateMarkers();\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    if (this.config.vertical) {\r\n      this.config.cssClasses.push('vertical');\r\n    }\r\n\r\n    let seekBarContainer = new DOM('div', {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses()\r\n    });\r\n\r\n    let seekBar = new DOM('div', {\r\n      'class': this.prefixCss('seekbar')\r\n    });\r\n    this.seekBar = seekBar;\r\n\r\n    // Indicator that shows the buffer fill level\r\n    let seekBarBufferLevel = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-bufferlevel')\r\n    });\r\n    this.seekBarBufferPosition = seekBarBufferLevel;\r\n\r\n    // Indicator that shows the current playback position\r\n    let seekBarPlaybackPosition = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-playbackposition')\r\n    });\r\n    this.seekBarPlaybackPosition = seekBarPlaybackPosition;\r\n\r\n    // A marker of the current playback position, e.g. a dot or line\r\n    let seekBarPlaybackPositionMarker = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-playbackposition-marker')\r\n    });\r\n    this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;\r\n\r\n    // Indicator that show where a seek will go to\r\n    let seekBarSeekPosition = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-seekposition')\r\n    });\r\n    this.seekBarSeekPosition = seekBarSeekPosition;\r\n\r\n    // Indicator that shows the full seekbar\r\n    let seekBarBackdrop = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-backdrop')\r\n    });\r\n    this.seekBarBackdrop = seekBarBackdrop;\r\n\r\n    let seekBarChapterMarkersContainer = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-markers')\r\n    });\r\n    this.seekBarMarkersContainer = seekBarChapterMarkersContainer;\r\n\r\n    seekBar.append(seekBarBackdrop, seekBarBufferLevel, seekBarSeekPosition,\r\n      seekBarPlaybackPosition, seekBarChapterMarkersContainer, seekBarPlaybackPositionMarker);\r\n\r\n    let self = this;\r\n    let seeking = false;\r\n\r\n    // Define handler functions so we can attach/remove them later\r\n    let mouseTouchMoveHandler = function(e: MouseEvent | TouchEvent) {\r\n      e.preventDefault();\r\n      // Avoid propagation to VR handler\r\n      e.stopPropagation();\r\n\r\n      let targetPercentage = 100 * self.getOffset(e);\r\n      self.setSeekPosition(targetPercentage);\r\n      self.setPlaybackPosition(targetPercentage);\r\n      self.onSeekPreviewEvent(targetPercentage, true);\r\n    };\r\n    let mouseTouchUpHandler = function(e: MouseEvent | TouchEvent) {\r\n      e.preventDefault();\r\n\r\n      // Remove handlers, seek operation is finished\r\n      new DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);\r\n      new DOM(document).off('touchend mouseup', mouseTouchUpHandler);\r\n\r\n      let targetPercentage = 100 * self.getOffset(e);\r\n      let snappedChapter = self.getMarkerAtPosition(targetPercentage);\r\n\r\n      self.setSeeking(false);\r\n      seeking = false;\r\n\r\n      // Fire seeked event\r\n      self.onSeekedEvent(snappedChapter ? snappedChapter.time : targetPercentage);\r\n    };\r\n\r\n    // A seek always start with a touchstart or mousedown directly on the seekbar.\r\n    // To track a mouse seek also outside the seekbar (for touch events this works automatically),\r\n    // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove\r\n    // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.\r\n    // A seek mouse gesture is thus basically a click with a long time frame between down and up events.\r\n    seekBar.on('touchstart mousedown', function(e: MouseEvent | TouchEvent) {\r\n      let isTouchEvent = self.touchSupported && e instanceof TouchEvent;\r\n\r\n      // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)\r\n      e.preventDefault();\r\n      // Avoid propagation to VR handler\r\n      e.stopPropagation();\r\n\r\n      self.setSeeking(true); // Set seeking class on DOM element\r\n      seeking = true; // Set seek tracking flag\r\n\r\n      // Fire seeked event\r\n      self.onSeekEvent();\r\n\r\n      // Add handler to track the seek operation over the whole document\r\n      new DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);\r\n      new DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);\r\n    });\r\n\r\n    // Display seek target indicator when mouse hovers or finger slides over seekbar\r\n    seekBar.on('touchmove mousemove', function(e: MouseEvent | TouchEvent) {\r\n      e.preventDefault();\r\n\r\n      if (seeking) {\r\n        // During a seek (when mouse is down or touch move active), we need to stop propagation to avoid\r\n        // the VR viewport reacting to the moves.\r\n        e.stopPropagation();\r\n        // Because the stopped propagation inhibits the event on the document, we need to call it from here\r\n        mouseTouchMoveHandler(e);\r\n      }\r\n\r\n      let position = 100 * self.getOffset(e);\r\n      self.setSeekPosition(position);\r\n      self.onSeekPreviewEvent(position, false);\r\n\r\n      if (self.hasLabel() && self.getLabel().isHidden()) {\r\n        self.getLabel().show();\r\n      }\r\n    });\r\n\r\n    // Hide seek target indicator when mouse or finger leaves seekbar\r\n    seekBar.on('touchend mouseleave', function(e: MouseEvent | TouchEvent) {\r\n      e.preventDefault();\r\n\r\n      self.setSeekPosition(0);\r\n\r\n      if (self.hasLabel()) {\r\n        self.getLabel().hide();\r\n      }\r\n    });\r\n\r\n    seekBarContainer.append(seekBar);\r\n\r\n    if (this.label) {\r\n      seekBarContainer.append(this.label.getDomElement());\r\n    }\r\n\r\n    return seekBarContainer;\r\n  }\r\n\r\n  protected updateMarkers(): void {\r\n    this.seekBarMarkersContainer.empty();\r\n    for (let marker of this.timelineMarkers) {\r\n      this.seekBarMarkersContainer.append(new DOM('div', {\r\n        'class': this.prefixCss('seekbar-marker'),\r\n        'data-marker-time': String(marker.time),\r\n        'data-marker-title': String(marker.title),\r\n      }).css({\r\n        'width': marker.time + '%',\r\n      }));\r\n    }\r\n  }\r\n\r\n  protected getMarkerAtPosition(percentage: number): TimelineMarker | null {\r\n    let snappedMarker: TimelineMarker = null;\r\n    let snappingRange = 1;\r\n    if (this.timelineMarkers.length > 0) {\r\n      for (let marker of this.timelineMarkers) {\r\n        if (percentage >= marker.time - snappingRange && percentage <= marker.time + snappingRange) {\r\n          snappedMarker = marker;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return snappedMarker;\r\n  }\r\n\r\n  /**\r\n   * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.\r\n   * @param eventPageX the pageX coordinate of an event to calculate the offset from\r\n   * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge\r\n   */\r\n  private getHorizontalOffset(eventPageX: number): number {\r\n    let elementOffsetPx = this.seekBar.offset().left;\r\n    let widthPx = this.seekBar.width();\r\n    let offsetPx = eventPageX - elementOffsetPx;\r\n    let offset = 1 / widthPx * offsetPx;\r\n\r\n    return this.sanitizeOffset(offset);\r\n  }\r\n\r\n  /**\r\n   * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.\r\n   * @param eventPageY the pageX coordinate of an event to calculate the offset from\r\n   * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge\r\n   */\r\n  private getVerticalOffset(eventPageY: number): number {\r\n    let elementOffsetPx = this.seekBar.offset().top;\r\n    let widthPx = this.seekBar.height();\r\n    let offsetPx = eventPageY - elementOffsetPx;\r\n    let offset = 1 / widthPx * offsetPx;\r\n\r\n    return 1 - this.sanitizeOffset(offset);\r\n  }\r\n\r\n  /**\r\n   * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).\r\n   * @param e the event to calculate the offset from\r\n   * @returns {number} a number in the range of [0, 1]\r\n   * @see #getHorizontalOffset\r\n   * @see #getVerticalOffset\r\n   */\r\n  private getOffset(e: MouseEvent | TouchEvent): number {\r\n    if (this.touchSupported && e instanceof TouchEvent) {\r\n      if (this.config.vertical) {\r\n        return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);\r\n      } else {\r\n        return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);\r\n      }\r\n    }\r\n    else if (e instanceof MouseEvent) {\r\n      if (this.config.vertical) {\r\n        return this.getVerticalOffset(e.pageY);\r\n      } else {\r\n        return this.getHorizontalOffset(e.pageX);\r\n      }\r\n    }\r\n    else {\r\n      if (console) {\r\n        console.warn('invalid event');\r\n      }\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sanitizes the mouse offset to the range of [0, 1].\r\n   *\r\n   * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method\r\n   * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below\r\n   * zero, but to display the seek target on the seek bar, we need to limit it to zero.\r\n   *\r\n   * @param offset the offset to sanitize\r\n   * @returns {number} the sanitized offset.\r\n   */\r\n  private sanitizeOffset(offset: number) {\r\n    // Since we track mouse moves over the whole document, the target can be outside the seek range,\r\n    // and we need to limit it to the [0, 1] range.\r\n    if (offset < 0) {\r\n      offset = 0;\r\n    } else if (offset > 1) {\r\n      offset = 1;\r\n    }\r\n\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * Sets the position of the playback position indicator.\r\n   * @param percent a number between 0 and 100 as returned by the player\r\n   */\r\n  setPlaybackPosition(percent: number) {\r\n    this.playbackPositionPercentage = percent;\r\n\r\n    // Set position of the bar\r\n    this.setPosition(this.seekBarPlaybackPosition, percent);\r\n\r\n    // Set position of the marker\r\n    let px = (this.config.vertical ? this.seekBar.height() : this.seekBar.width()) / 100 * percent;\r\n    if (this.config.vertical) {\r\n      px = this.seekBar.height() - px;\r\n    }\r\n    let style = this.config.vertical ?\r\n      // -ms-transform required for IE9\r\n      { 'transform': 'translateY(' + px + 'px)', '-ms-transform': 'translateY(' + px + 'px)' } :\r\n      { 'transform': 'translateX(' + px + 'px)', '-ms-transform': 'translateX(' + px + 'px)' };\r\n    this.seekBarPlaybackPositionMarker.css(style);\r\n  }\r\n\r\n  /**\r\n   * Refreshes the playback position. Can be used by subclasses to refresh the position when\r\n   * the size of the component changes.\r\n   */\r\n  protected refreshPlaybackPosition() {\r\n    this.setPlaybackPosition(this.playbackPositionPercentage);\r\n  }\r\n\r\n  /**\r\n   * Sets the position until which media is buffered.\r\n   * @param percent a number between 0 and 100\r\n   */\r\n  setBufferPosition(percent: number) {\r\n    this.setPosition(this.seekBarBufferPosition, percent);\r\n  }\r\n\r\n  /**\r\n   * Sets the position where a seek, if executed, would jump to.\r\n   * @param percent a number between 0 and 100\r\n   */\r\n  setSeekPosition(percent: number) {\r\n    this.setPosition(this.seekBarSeekPosition, percent);\r\n  }\r\n\r\n  /**\r\n   * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.\r\n   * @param element the element to set the position for\r\n   * @param percent a number between 0 and 100\r\n   */\r\n  private setPosition(element: DOM, percent: number) {\r\n    let scale = percent / 100;\r\n    let style = this.config.vertical ?\r\n      // -ms-transform required for IE9\r\n      { 'transform': 'scaleY(' + scale + ')', '-ms-transform': 'scaleY(' + scale + ')' } :\r\n      { 'transform': 'scaleX(' + scale + ')', '-ms-transform': 'scaleX(' + scale + ')' };\r\n    element.css(style);\r\n  }\r\n\r\n  /**\r\n   * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used\r\n   * to adjust the styling while seeking.\r\n   *\r\n   * @param seeking should be true when entering seek state, false when exiting the seek state\r\n   */\r\n  setSeeking(seeking: boolean) {\r\n    if (seeking) {\r\n      this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));\r\n    } else {\r\n      this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the seek bar is currently in the seek state.\r\n   * @returns {boolean} true if in seek state, else false\r\n   */\r\n  isSeeking(): boolean {\r\n    return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));\r\n  }\r\n\r\n  /**\r\n   * Checks if the seek bar has a {@link SeekBarLabel}.\r\n   * @returns {boolean} true if the seek bar has a label, else false\r\n   */\r\n  hasLabel(): boolean {\r\n    return this.label != null;\r\n  }\r\n\r\n  /**\r\n   * Gets the label of this seek bar.\r\n   * @returns {SeekBarLabel} the label if this seek bar has a label, else null\r\n   */\r\n  getLabel(): SeekBarLabel | null {\r\n    return this.label;\r\n  }\r\n\r\n  protected onSeekEvent() {\r\n    this.seekBarEvents.onSeek.dispatch(this);\r\n  }\r\n\r\n  protected onSeekPreviewEvent(percentage: number, scrubbing: boolean) {\r\n    let snappedMarker = this.getMarkerAtPosition(percentage);\r\n\r\n    if (this.label) {\r\n      this.label.setText(percentage + '');\r\n      this.label.getDomElement().css({\r\n        'left': (snappedMarker ? snappedMarker.time : percentage) + '%'\r\n      });\r\n    }\r\n\r\n    this.seekBarEvents.onSeekPreview.dispatch(this, {\r\n      scrubbing: scrubbing,\r\n      position: percentage,\r\n      marker: snappedMarker,\r\n    });\r\n  }\r\n\r\n  protected onSeekedEvent(percentage: number) {\r\n    this.seekBarEvents.onSeeked.dispatch(this, percentage);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when a scrubbing seek operation is started.\r\n   * @returns {Event<SeekBar, NoArgs>}\r\n   */\r\n  get onSeek(): Event<SeekBar, NoArgs> {\r\n    return this.seekBarEvents.onSeek.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,\r\n   * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,\r\n   * i.e. the seek bar label, should be updated).\r\n   * @returns {Event<SeekBar, SeekPreviewEventArgs>}\r\n   */\r\n  get onSeekPreview(): Event<SeekBar, SeekPreviewEventArgs> {\r\n    return this.seekBarEvents.onSeekPreview.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.\r\n   * @returns {Event<SeekBar, number>}\r\n   */\r\n  get onSeeked(): Event<SeekBar, number> {\r\n    return this.seekBarEvents.onSeeked.getEvent();\r\n  }\r\n}","import {Container, ContainerConfig} from './container';\r\nimport {Label, LabelConfig} from './label';\r\nimport {Component, ComponentConfig} from './component';\r\nimport {UIInstanceManager, SeekPreviewArgs} from '../uimanager';\r\nimport {StringUtils} from '../utils';\r\n\r\n/**\r\n * Configuration interface for a {@link SeekBarLabel}.\r\n */\r\nexport interface SeekBarLabelConfig extends ContainerConfig {\r\n  // nothing yet\r\n}\r\n\r\n/**\r\n * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).\r\n */\r\nexport class SeekBarLabel extends Container<SeekBarLabelConfig> {\r\n\r\n  private timeLabel: Label<LabelConfig>;\r\n  private titleLabel: Label<LabelConfig>;\r\n  private thumbnail: Component<ComponentConfig>;\r\n\r\n  private timeFormat: string;\r\n\r\n  constructor(config: SeekBarLabelConfig = {}) {\r\n    super(config);\r\n\r\n    this.timeLabel = new Label({ cssClasses: ['seekbar-label-time'] });\r\n    this.titleLabel = new Label({ cssClasses: ['seekbar-label-title'] });\r\n    this.thumbnail = new Component({ cssClasses: ['seekbar-thumbnail'] });\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-seekbar-label',\r\n      components: [new Container({\r\n        components: [\r\n          this.thumbnail,\r\n          new Container({\r\n            components: [this.titleLabel, this.timeLabel],\r\n            cssClass: 'seekbar-label-metadata',\r\n          })],\r\n        cssClass: 'seekbar-label-inner',\r\n      })],\r\n      hidden: true\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    uimanager.onSeekPreview.subscribe(function(sender, args: SeekPreviewArgs) {\r\n      if (player.isLive()) {\r\n        let time = player.getMaxTimeShift() - player.getMaxTimeShift() * (args.position / 100);\r\n        self.setTime(time);\r\n      } else {\r\n        let percentage = 0;\r\n        if (args.marker) {\r\n          percentage = args.marker.time;\r\n          self.setTitleText(args.marker.title);\r\n        } else {\r\n          percentage = args.position;\r\n          self.setTitleText(null);\r\n        }\r\n        let time = player.getDuration() * (percentage / 100);\r\n        self.setTime(time);\r\n        self.setThumbnail(player.getThumb(time));\r\n      }\r\n    });\r\n\r\n    let init = function() {\r\n      // Set time format depending on source duration\r\n      self.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\r\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_READY, init);\r\n    init();\r\n  }\r\n\r\n  /**\r\n   * Sets arbitrary text on the label.\r\n   * @param text the text to show on the label\r\n   */\r\n  setText(text: string) {\r\n    this.timeLabel.setText(text);\r\n  }\r\n\r\n  /**\r\n   * Sets a time to be displayed on the label.\r\n   * @param seconds the time in seconds to display on the label\r\n   */\r\n  setTime(seconds: number) {\r\n    this.setText(StringUtils.secondsToTime(seconds, this.timeFormat));\r\n  }\r\n\r\n  /**\r\n   * Sets the text on the title label.\r\n   * @param text the text to show on the label\r\n   */\r\n  setTitleText(text: string) {\r\n    this.titleLabel.setText(text);\r\n  }\r\n\r\n  /**\r\n   * Sets or removes a thumbnail on the label.\r\n   * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail\r\n   */\r\n  setThumbnail(thumbnail: bitmovin.player.Thumbnail = null) {\r\n    let thumbnailElement = this.thumbnail.getDomElement();\r\n\r\n    if (thumbnail == null) {\r\n      thumbnailElement.css({\r\n        'background-image': null,\r\n        'display': null,\r\n        'width': null,\r\n        'height': null\r\n      });\r\n    }\r\n    else {\r\n      thumbnailElement.css({\r\n        'display': 'inherit',\r\n        'background-image': `url(${thumbnail.url})`,\r\n        'width': thumbnail.w + 'px',\r\n        'height': thumbnail.h + 'px',\r\n        'background-position': `-${thumbnail.x}px -${thumbnail.y}px`\r\n      });\r\n    }\r\n  }\r\n}","import {ListSelector, ListSelectorConfig} from './listselector';\r\nimport {DOM} from '../dom';\r\n\r\n/**\r\n * A simple select box providing the possibility to select a single item out of a list of available items.\r\n *\r\n * DOM example:\r\n * <code>\r\n *     <select class='ui-selectbox'>\r\n *         <option value='key'>label</option>\r\n *         ...\r\n *     </select>\r\n * </code>\r\n */\r\nexport class SelectBox extends ListSelector<ListSelectorConfig> {\r\n\r\n  private selectElement: DOM;\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-selectbox'\r\n    }, this.config);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let selectElement = new DOM('select', {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses()\r\n    });\r\n\r\n    this.selectElement = selectElement;\r\n    this.updateDomItems();\r\n\r\n    let self = this;\r\n    selectElement.on('change', function() {\r\n      let value = new DOM(this).val();\r\n      self.onItemSelectedEvent(value, false);\r\n    });\r\n\r\n    return selectElement;\r\n  }\r\n\r\n  protected updateDomItems(selectedValue: string = null) {\r\n    // Delete all children\r\n    this.selectElement.empty();\r\n\r\n    // Add updated children\r\n    for (let item of this.items) {\r\n      let optionElement = new DOM('option', {\r\n        'value': item.key\r\n      }).html(item.label);\r\n\r\n      if (item.key === selectedValue + '') { // convert selectedValue to string to catch 'null'/null case\r\n        optionElement.attr('selected', 'selected');\r\n      }\r\n\r\n      this.selectElement.append(optionElement);\r\n    }\r\n  }\r\n\r\n  protected onItemAddedEvent(value: string) {\r\n    super.onItemAddedEvent(value);\r\n    this.updateDomItems(this.selectedItem);\r\n  }\r\n\r\n  protected onItemRemovedEvent(value: string) {\r\n    super.onItemRemovedEvent(value);\r\n    this.updateDomItems(this.selectedItem);\r\n  }\r\n\r\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\r\n    super.onItemSelectedEvent(value);\r\n    if (updateDomItems) {\r\n      this.updateDomItems(value);\r\n    }\r\n  }\r\n}","import {ContainerConfig, Container} from './container';\r\nimport {SelectBox} from './selectbox';\r\nimport {Label, LabelConfig} from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {VideoQualitySelectBox} from './videoqualityselectbox';\r\nimport {AudioQualitySelectBox} from './audioqualityselectbox';\r\nimport {Timeout} from '../timeout';\r\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\r\n\r\n/**\r\n * Configuration interface for a {@link SettingsPanel}.\r\n */\r\nexport interface SettingsPanelConfig extends ContainerConfig {\r\n  /**\r\n   * The delay in milliseconds after which the settings panel will be hidden when there is no user interaction.\r\n   * Set to -1 to disable automatic hiding.\r\n   * Default: 3 seconds (3000)\r\n   */\r\n  hideDelay?: number;\r\n}\r\n\r\n/**\r\n * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.\r\n */\r\nexport class SettingsPanel extends Container<SettingsPanelConfig> {\r\n\r\n  private static readonly CLASS_LAST = 'last';\r\n\r\n  private settingsPanelEvents = {\r\n    onSettingsStateChanged: new EventDispatcher<SettingsPanel, NoArgs>()\r\n  };\r\n\r\n  constructor(config: SettingsPanelConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig<SettingsPanelConfig>(config, {\r\n      cssClass: 'ui-settings-panel',\r\n      hideDelay: 3000\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n    let config = <SettingsPanelConfig>this.getConfig(); // TODO fix generics type inference\r\n\r\n    if (config.hideDelay > -1) {\r\n      let timeout = new Timeout(config.hideDelay, function() {\r\n        self.hide();\r\n      });\r\n\r\n      self.onShow.subscribe(function() {\r\n        // Activate timeout when shown\r\n        timeout.start();\r\n      });\r\n      self.getDomElement().on('mousemove', function() {\r\n        // Reset timeout on interaction\r\n        timeout.reset();\r\n      });\r\n      self.onHide.subscribe(function() {\r\n        // Clear timeout when hidden from outside\r\n        timeout.clear();\r\n      });\r\n    }\r\n\r\n    // Fire event when the state of a settings-item has changed\r\n    let settingsStateChangedHandler = function() {\r\n      self.onSettingsStateChangedEvent();\r\n\r\n      // Attach marker class to last visible item\r\n      let lastShownItem = null;\r\n      for (let component of self.getItems()) {\r\n        if (component instanceof SettingsPanelItem) {\r\n          component.getDomElement().removeClass(self.prefixCss(SettingsPanel.CLASS_LAST));\r\n          if (component.isShown()) {\r\n            lastShownItem = component;\r\n          }\r\n        }\r\n      }\r\n      if (lastShownItem) {\r\n        lastShownItem.getDomElement().addClass(self.prefixCss(SettingsPanel.CLASS_LAST));\r\n      }\r\n    };\r\n    for (let component of this.getItems()) {\r\n      if (component instanceof SettingsPanelItem) {\r\n        component.onActiveChanged.subscribe(settingsStateChangedHandler);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if there are active settings within this settings panel. An active setting is a setting that is visible\r\n   * and enabled, which the user can interact with.\r\n   * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user\r\n   */\r\n  hasActiveSettings(): boolean {\r\n    for (let component of this.getItems()) {\r\n      if (component.isActive()) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private getItems(): SettingsPanelItem[] {\r\n    return <SettingsPanelItem[]>this.config.components;\r\n  }\r\n\r\n  protected onSettingsStateChangedEvent() {\r\n    this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when one or more {@link SettingsPanelItem items} have changed state.\r\n   * @returns {Event<SettingsPanel, NoArgs>}\r\n   */\r\n  get onSettingsStateChanged(): Event<SettingsPanel, NoArgs> {\r\n    return this.settingsPanelEvents.onSettingsStateChanged.getEvent();\r\n  }\r\n}\r\n\r\n/**\r\n * An item for a {@link SettingsPanel}, containing a {@link Label} and a component that configures a setting.\r\n * Supported setting components: {@link SelectBox}\r\n */\r\nexport class SettingsPanelItem extends Container<ContainerConfig> {\r\n\r\n  private label: Label<LabelConfig>;\r\n  private setting: SelectBox;\r\n\r\n  private settingsPanelItemEvents = {\r\n    onActiveChanged: new EventDispatcher<SettingsPanelItem, NoArgs>()\r\n  };\r\n\r\n  constructor(label: string, selectBox: SelectBox, config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.label = new Label({ text: label });\r\n    this.setting = selectBox;\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-settings-panel-item',\r\n      components: [this.label, this.setting]\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    let self = this;\r\n\r\n    let handleConfigItemChanged = function() {\r\n      // The minimum number of items that must be available for the setting to be displayed\r\n      // By default, at least two items must be available, else a selection is not possible\r\n      let minItemsToDisplay = 2;\r\n      // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single\r\n      // available quality also does not make sense\r\n      if (self.setting instanceof VideoQualitySelectBox || self.setting instanceof AudioQualitySelectBox) {\r\n        minItemsToDisplay = 3;\r\n      }\r\n\r\n      // Hide the setting if no meaningful choice is available\r\n      if (self.setting.itemCount() < minItemsToDisplay) {\r\n        self.hide();\r\n      } else {\r\n        self.show();\r\n      }\r\n\r\n      // Visibility might have changed and therefore the active state might have changed so we fire the event\r\n      // TODO fire only when state has really changed (e.g. check if visibility has really changed)\r\n      self.onActiveChangedEvent();\r\n    };\r\n\r\n    self.setting.onItemAdded.subscribe(handleConfigItemChanged);\r\n    self.setting.onItemRemoved.subscribe(handleConfigItemChanged);\r\n\r\n    // Initialize hidden state\r\n    handleConfigItemChanged();\r\n  }\r\n\r\n  /**\r\n   * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.\r\n   * @returns {boolean} true if the panel is active, else false\r\n   */\r\n  isActive(): boolean {\r\n    return this.isShown();\r\n  }\r\n\r\n  protected onActiveChangedEvent() {\r\n    this.settingsPanelItemEvents.onActiveChanged.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the 'active' state of this item changes.\r\n   * @see #isActive\r\n   * @returns {Event<SettingsPanelItem, NoArgs>}\r\n   */\r\n  get onActiveChanged(): Event<SettingsPanelItem, NoArgs> {\r\n    return this.settingsPanelItemEvents.onActiveChanged.getEvent();\r\n  }\r\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {SettingsPanel} from './settingspanel';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * Configuration interface for the {@link SettingsToggleButton}.\r\n */\r\nexport interface SettingsToggleButtonConfig extends ToggleButtonConfig {\r\n  /**\r\n   * The settings panel whose visibility the button should toggle.\r\n   */\r\n  settingsPanel: SettingsPanel;\r\n\r\n  /**\r\n   * Decides if the button should be automatically hidden when the settings panel does not contain any active settings.\r\n   * Default: true\r\n   */\r\n  autoHideWhenNoActiveSettings?: boolean;\r\n}\r\n\r\n/**\r\n * A button that toggles visibility of a settings panel.\r\n */\r\nexport class SettingsToggleButton extends ToggleButton<SettingsToggleButtonConfig> {\r\n\r\n  constructor(config: SettingsToggleButtonConfig) {\r\n    super(config);\r\n\r\n    if (!config.settingsPanel) {\r\n      throw new Error('Required SettingsPanel is missing');\r\n    }\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-settingstogglebutton',\r\n      text: 'Settings',\r\n      settingsPanel: null,\r\n      autoHideWhenNoActiveSettings: true\r\n    }, <SettingsToggleButtonConfig>this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n    let config = <SettingsToggleButtonConfig>this.getConfig(); // TODO fix generics type inference\r\n    let settingsPanel = config.settingsPanel;\r\n\r\n    this.onClick.subscribe(function() {\r\n      settingsPanel.toggleHidden();\r\n    });\r\n    settingsPanel.onShow.subscribe(function() {\r\n      // Set toggle status to on when the settings panel shows\r\n      self.on();\r\n    });\r\n    settingsPanel.onHide.subscribe(function() {\r\n      // Set toggle status to off when the settings panel hides\r\n      self.off();\r\n    });\r\n\r\n    // Handle automatic hiding of the button if there are no settings for the user to interact with\r\n    if (config.autoHideWhenNoActiveSettings) {\r\n      // Setup handler to show/hide button when the settings change\r\n      let settingsPanelItemsChangedHandler = function() {\r\n        if (settingsPanel.hasActiveSettings()) {\r\n          if (self.isHidden()) {\r\n            self.show();\r\n          }\r\n        } else {\r\n          if (self.isShown()) {\r\n            self.hide();\r\n          }\r\n        }\r\n      };\r\n      // Wire the handler to the event\r\n      settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);\r\n      // Call handler for first init at startup\r\n      settingsPanelItemsChangedHandler();\r\n    }\r\n  }\r\n}","import {Container, ContainerConfig} from './container';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport SubtitleCueEvent = bitmovin.player.SubtitleCueEvent;\r\nimport {Label, LabelConfig} from './label';\r\nimport {ComponentConfig, Component} from './component';\r\nimport {ControlBar} from './controlbar';\r\n\r\n/**\r\n * Overlays the player to display subtitles.\r\n */\r\nexport class SubtitleOverlay extends Container<ContainerConfig> {\r\n\r\n  private static readonly CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';\r\n\r\n  /**\r\n   * Inner label that renders the subtitle text\r\n   */\r\n  private subtitleLabel: Label<LabelConfig>;\r\n\r\n  constructor(config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.subtitleLabel = new Label<LabelConfig>({ cssClass: 'ui-subtitle-label' });\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-subtitle-overlay',\r\n      components: [this.subtitleLabel]\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CUE_ENTER, function(event: SubtitleCueEvent) {\r\n      self.subtitleLabel.setText(event.text);\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_CUE_EXIT, function(event: SubtitleCueEvent) {\r\n      self.subtitleLabel.setText('');\r\n    });\r\n\r\n    let subtitleClearHandler = function() {\r\n      self.subtitleLabel.setText('');\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_AUDIO_CHANGED, subtitleClearHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SUBTITLE_CHANGED, subtitleClearHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SEEK, subtitleClearHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_TIME_SHIFT, subtitleClearHandler);\r\n\r\n    uimanager.onComponentShow.subscribe(function(component: Component<ComponentConfig>) {\r\n      if (component instanceof ControlBar) {\r\n        self.getDomElement().addClass(self.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\r\n      }\r\n    });\r\n    uimanager.onComponentHide.subscribe(function(component: Component<ComponentConfig>) {\r\n      if (component instanceof ControlBar) {\r\n        self.getDomElement().removeClass(self.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\r\n      }\r\n    });\r\n  }\r\n}","import {SelectBox} from './selectbox';\r\nimport {ListSelectorConfig} from './listselector';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport SubtitleAddedEvent = bitmovin.player.SubtitleAddedEvent;\r\nimport SubtitleChangedEvent = bitmovin.player.SubtitleChangedEvent;\r\nimport SubtitleRemovedEvent = bitmovin.player.SubtitleRemovedEvent;\r\n\r\n/**\r\n * A select box providing a selection between available subtitle and caption tracks.\r\n */\r\nexport class SubtitleSelectBox extends SelectBox {\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    let updateSubtitles = function() {\r\n      self.clearItems();\r\n\r\n      for (let subtitle of player.getAvailableSubtitles()) {\r\n        self.addItem(subtitle.id, subtitle.label);\r\n      }\r\n    };\r\n\r\n    self.onItemSelected.subscribe(function(sender: SubtitleSelectBox, value: string) {\r\n      player.setSubtitle(value === 'null' ? null : value);\r\n    });\r\n\r\n    // React to API events\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SUBTITLE_ADDED, function(event: SubtitleAddedEvent) {\r\n      self.addItem(event.subtitle.id, event.subtitle.label);\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SUBTITLE_CHANGED, function(event: SubtitleChangedEvent) {\r\n      self.selectItem(event.targetSubtitle.id);\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SUBTITLE_REMOVED, function(event: SubtitleRemovedEvent) {\r\n      self.removeItem(event.subtitleId);\r\n    });\r\n\r\n    // Update subtitles when source goes away\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SOURCE_UNLOADED, updateSubtitles);\r\n    // Update subtitles when a new source is loaded\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_READY, updateSubtitles);\r\n\r\n    // Populate subtitles at startup\r\n    updateSubtitles();\r\n  }\r\n}","import {Container, ContainerConfig} from './container';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {MetadataLabel, MetadataLabelContent} from './metadatalabel';\r\n\r\n/**\r\n * Configuration interface for a {@link TitleBar}.\r\n */\r\nexport interface TitleBarConfig extends ContainerConfig {\r\n  // nothing yet\r\n}\r\n\r\n/**\r\n * Displays a title bar containing a label with the title of the video.\r\n */\r\nexport class TitleBar extends Container<TitleBarConfig> {\r\n\r\n  constructor(config: TitleBarConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-titlebar',\r\n      hidden: true,\r\n      components: [\r\n        new MetadataLabel({ content: MetadataLabelContent.Title }),\r\n        new MetadataLabel({ content: MetadataLabelContent.Description })\r\n      ]\r\n    }, <TitleBarConfig>this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    uimanager.onControlsShow.subscribe(function () {\r\n      self.show();\r\n    });\r\n    uimanager.onControlsHide.subscribe(function () {\r\n      self.hide();\r\n    });\r\n  }\r\n}","import {Button, ButtonConfig} from './button';\r\nimport {NoArgs, EventDispatcher, Event} from '../eventdispatcher';\r\n\r\n/**\r\n * Configuration interface for a toggle button component.\r\n */\r\nexport interface ToggleButtonConfig extends ButtonConfig {\r\n  /**\r\n   * The text on the button.\r\n   */\r\n  text?: string;\r\n}\r\n\r\n/**\r\n * A button that can be toggled between 'on' and 'off' states.\r\n */\r\nexport class ToggleButton<Config extends ToggleButtonConfig> extends Button<ToggleButtonConfig> {\r\n\r\n  private static readonly CLASS_ON = 'on';\r\n  private static readonly CLASS_OFF = 'off';\r\n\r\n  private onState: boolean;\r\n\r\n  private toggleButtonEvents = {\r\n    onToggle: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\r\n    onToggleOn: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\r\n    onToggleOff: new EventDispatcher<ToggleButton<Config>, NoArgs>()\r\n  };\r\n\r\n  constructor(config: ToggleButtonConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-togglebutton'\r\n    }, this.config);\r\n  }\r\n\r\n  /**\r\n   * Toggles the button to the 'on' state.\r\n   */\r\n  on() {\r\n    if (this.isOff()) {\r\n      this.onState = true;\r\n      this.getDomElement().removeClass(this.prefixCss(ToggleButton.CLASS_OFF));\r\n      this.getDomElement().addClass(this.prefixCss(ToggleButton.CLASS_ON));\r\n\r\n      this.onToggleEvent();\r\n      this.onToggleOnEvent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the button to the 'off' state.\r\n   */\r\n  off() {\r\n    if (this.isOn()) {\r\n      this.onState = false;\r\n      this.getDomElement().removeClass(this.prefixCss(ToggleButton.CLASS_ON));\r\n      this.getDomElement().addClass(this.prefixCss(ToggleButton.CLASS_OFF));\r\n\r\n      this.onToggleEvent();\r\n      this.onToggleOffEvent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.\r\n   */\r\n  toggle() {\r\n    if (this.isOn()) {\r\n      this.off();\r\n    } else {\r\n      this.on();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the toggle button is in the 'on' state.\r\n   * @returns {boolean} true if button is 'on', false if 'off'\r\n   */\r\n  isOn(): boolean {\r\n    return this.onState;\r\n  }\r\n\r\n  /**\r\n   * Checks if the toggle button is in the 'off' state.\r\n   * @returns {boolean} true if button is 'off', false if 'on'\r\n   */\r\n  isOff(): boolean {\r\n    return !this.isOn();\r\n  }\r\n\r\n  protected onClickEvent() {\r\n    super.onClickEvent();\r\n\r\n    // Fire the toggle event together with the click event\r\n    // (they are technically the same, only the semantics are different)\r\n    this.onToggleEvent();\r\n  }\r\n\r\n  protected onToggleEvent() {\r\n    this.toggleButtonEvents.onToggle.dispatch(this);\r\n  }\r\n\r\n  protected onToggleOnEvent() {\r\n    this.toggleButtonEvents.onToggleOn.dispatch(this);\r\n  }\r\n\r\n  protected onToggleOffEvent() {\r\n    this.toggleButtonEvents.onToggleOff.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the button is toggled.\r\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\r\n   */\r\n  get onToggle(): Event<ToggleButton<Config>, NoArgs> {\r\n    return this.toggleButtonEvents.onToggle.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the button is toggled 'on'.\r\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\r\n   */\r\n  get onToggleOn(): Event<ToggleButton<Config>, NoArgs> {\r\n    return this.toggleButtonEvents.onToggleOn.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the button is toggled 'off'.\r\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\r\n   */\r\n  get onToggleOff(): Event<ToggleButton<Config>, NoArgs> {\r\n    return this.toggleButtonEvents.onToggleOff.getEvent();\r\n  }\r\n}","import {Component, ComponentConfig} from './component';\r\nimport {DOM} from '../dom';\r\n\r\n/**\r\n * Animated analog TV static noise.\r\n */\r\nexport class TvNoiseCanvas extends Component<ComponentConfig> {\r\n\r\n  private canvas: DOM;\r\n\r\n  private canvasElement: HTMLCanvasElement;\r\n  private canvasContext: CanvasRenderingContext2D;\r\n  private canvasWidth = 160;\r\n  private canvasHeight = 90;\r\n  private interferenceHeight = 50;\r\n  private lastFrameUpdate: number = 0;\r\n  private frameInterval: number = 60;\r\n  private useAnimationFrame: boolean = !!window.requestAnimationFrame;\r\n  private noiseAnimationWindowPos: number;\r\n  private frameUpdateHandlerId: number;\r\n\r\n  constructor(config: ComponentConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-tvnoisecanvas'\r\n    }, this.config);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    return this.canvas = new DOM('canvas', { 'class': this.getCssClasses() });\r\n  }\r\n\r\n  start(): void {\r\n    this.canvasElement = <HTMLCanvasElement>this.canvas.getElements()[0];\r\n    this.canvasContext = this.canvasElement.getContext('2d');\r\n    this.noiseAnimationWindowPos = -this.canvasHeight;\r\n    this.lastFrameUpdate = 0;\r\n\r\n    this.canvasElement.width = this.canvasWidth;\r\n    this.canvasElement.height = this.canvasHeight;\r\n\r\n    this.renderFrame();\r\n  }\r\n\r\n  stop(): void {\r\n    if (this.useAnimationFrame) {\r\n      cancelAnimationFrame(this.frameUpdateHandlerId);\r\n    } else {\r\n      clearTimeout(this.frameUpdateHandlerId);\r\n    }\r\n  }\r\n\r\n  private renderFrame(): void {\r\n    // This code has been copied from the player controls.js and simplified\r\n\r\n    if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {\r\n      // It's too early to render the next frame\r\n      this.scheduleNextRender();\r\n      return;\r\n    }\r\n\r\n    let currentPixelOffset;\r\n    let canvasWidth = this.canvasWidth;\r\n    let canvasHeight = this.canvasHeight;\r\n\r\n    // Create texture\r\n    let noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);\r\n\r\n    // Fill texture with noise\r\n    for (let y = 0; y < canvasHeight; y++) {\r\n      for (let x = 0; x < canvasWidth; x++) {\r\n        currentPixelOffset = (canvasWidth * y * 4) + x * 4;\r\n        noiseImage.data[currentPixelOffset] = Math.random() * 255;\r\n        if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {\r\n          noiseImage.data[currentPixelOffset] *= 0.85;\r\n        }\r\n        noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];\r\n        noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];\r\n        noiseImage.data[currentPixelOffset + 3] = 50;\r\n      }\r\n    }\r\n\r\n    // Put texture onto canvas\r\n    this.canvasContext.putImageData(noiseImage, 0, 0);\r\n\r\n    this.lastFrameUpdate = new Date().getTime();\r\n    this.noiseAnimationWindowPos += 7;\r\n    if (this.noiseAnimationWindowPos > canvasHeight) {\r\n      this.noiseAnimationWindowPos = -canvasHeight;\r\n    }\r\n\r\n    this.scheduleNextRender();\r\n  }\r\n\r\n  private scheduleNextRender(): void {\r\n    if (this.useAnimationFrame) {\r\n      this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));\r\n    } else {\r\n      this.frameUpdateHandlerId = setTimeout(this.renderFrame.bind(this), this.frameInterval);\r\n    }\r\n  }\r\n}","import {ContainerConfig, Container} from './container';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {DOM} from '../dom';\r\nimport {Timeout} from '../timeout';\r\nimport {PlayerUtils} from '../utils';\r\nimport PlayerResizeEvent = bitmovin.player.PlayerResizeEvent;\r\n\r\n/**\r\n * Configuration interface for a {@link UIContainer}.\r\n */\r\nexport interface UIContainerConfig extends ContainerConfig {\r\n  /**\r\n   * The delay in milliseconds after which the control bar will be hidden when there is no user interaction.\r\n   * Default: 5 seconds (5000)\r\n   */\r\n  hideDelay?: number;\r\n}\r\n\r\n/**\r\n * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and\r\n * setup the UI.\r\n */\r\nexport class UIContainer extends Container<UIContainerConfig> {\r\n\r\n  private static readonly STATE_IDLE = 'player-state-idle';\r\n  private static readonly STATE_PREPARED = 'player-state-prepared';\r\n  private static readonly STATE_PLAYING = 'player-state-playing';\r\n  private static readonly STATE_PAUSED = 'player-state-paused';\r\n  private static readonly STATE_FINISHED = 'player-state-finished';\r\n\r\n  private static readonly FULLSCREEN = 'fullscreen';\r\n  private static readonly BUFFERING = 'buffering';\r\n  private static readonly CONTROLS_SHOWN = 'controls-shown';\r\n  private static readonly CONTROLS_HIDDEN = 'controls-hidden';\r\n\r\n  constructor(config: UIContainerConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, <UIContainerConfig>{\r\n      cssClass: 'ui-uicontainer',\r\n      hideDelay: 5000,\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.configureUIShowHide(player, uimanager);\r\n    this.configurePlayerStates(player, uimanager);\r\n  }\r\n\r\n  private configureUIShowHide(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    let self = this;\r\n    let container = this.getDomElement();\r\n    let config = <UIContainerConfig>this.getConfig();\r\n\r\n    let isUiShown = false;\r\n    let isSeeking = false;\r\n\r\n    let showUi = function() {\r\n      if (!isUiShown) {\r\n        // Let subscribers know that they should reveal themselves\r\n        uimanager.onControlsShow.dispatch(self);\r\n        isUiShown = true;\r\n      }\r\n      // Don't trigger timeout while seeking, it will be triggered once the seek is finished\r\n      if (!isSeeking) {\r\n        uiHideTimeout.start();\r\n      }\r\n    };\r\n\r\n    let hideUi = function() {\r\n      if (isUiShown) {\r\n        // Let subscribers know that they should now hide themselves\r\n        uimanager.onControlsHide.dispatch(self);\r\n        isUiShown = false;\r\n      }\r\n    };\r\n\r\n    // Timeout to defer UI hiding by the configured delay time\r\n    let uiHideTimeout = new Timeout(config.hideDelay, hideUi);\r\n\r\n    // On touch displays, the first touch reveals the UI\r\n    container.on('touchend', function(e) {\r\n      if (!isUiShown) {\r\n        // Only if the UI is hidden, we prevent other actions and reveal the UI instead\r\n        e.preventDefault();\r\n        showUi();\r\n      }\r\n    });\r\n    // When the mouse enters, we show the UI\r\n    container.on('mouseenter', function() {\r\n      showUi();\r\n    });\r\n    // When the mouse moves within, we show the UI\r\n    container.on('mousemove', function() {\r\n      showUi();\r\n    });\r\n    // When the mouse leaves, we can prepare to hide the UI, except a seek is going on\r\n    container.on('mouseleave', function() {\r\n      // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not hide\r\n      // the UI in such cases\r\n      if (!isSeeking) {\r\n        uiHideTimeout.start();\r\n      }\r\n    });\r\n\r\n    uimanager.onSeek.subscribe(function() {\r\n      uiHideTimeout.clear(); // Don't hide UI while a seek is in progress\r\n      isSeeking = true;\r\n    });\r\n    uimanager.onSeeked.subscribe(function() {\r\n      isSeeking = false;\r\n      uiHideTimeout.start(); // Re-enable UI hide timeout after a seek\r\n    });\r\n  }\r\n\r\n  private configurePlayerStates(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    let self = this;\r\n    let container = this.getDomElement();\r\n\r\n    let removeStates = function() {\r\n      container.removeClass(self.prefixCss(UIContainer.STATE_IDLE));\r\n      container.removeClass(self.prefixCss(UIContainer.STATE_PREPARED));\r\n      container.removeClass(self.prefixCss(UIContainer.STATE_PLAYING));\r\n      container.removeClass(self.prefixCss(UIContainer.STATE_PAUSED));\r\n      container.removeClass(self.prefixCss(UIContainer.STATE_FINISHED));\r\n    };\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_READY, function() {\r\n      removeStates();\r\n      container.addClass(self.prefixCss(UIContainer.STATE_PREPARED));\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PLAY, function() {\r\n      removeStates();\r\n      container.addClass(self.prefixCss(UIContainer.STATE_PLAYING));\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PAUSED, function() {\r\n      removeStates();\r\n      container.addClass(self.prefixCss(UIContainer.STATE_PAUSED));\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PLAYBACK_FINISHED, function() {\r\n      removeStates();\r\n      container.addClass(self.prefixCss(UIContainer.STATE_FINISHED));\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SOURCE_UNLOADED, function() {\r\n      removeStates();\r\n      container.addClass(self.prefixCss(UIContainer.STATE_IDLE));\r\n    });\r\n    // Init in idle state without a source or prepared if a source is set\r\n    container.addClass(self.prefixCss(PlayerUtils.isSourceLoaded(player) ?\r\n      UIContainer.STATE_PREPARED : UIContainer.STATE_IDLE));\r\n\r\n    // Fullscreen marker class\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_FULLSCREEN_ENTER, function() {\r\n      container.addClass(self.prefixCss(UIContainer.FULLSCREEN));\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_FULLSCREEN_EXIT, function() {\r\n      container.removeClass(self.prefixCss(UIContainer.FULLSCREEN));\r\n    });\r\n    // Init fullscreen state\r\n    if (player.isFullscreen()) {\r\n      container.addClass(self.prefixCss(UIContainer.FULLSCREEN));\r\n    }\r\n\r\n    // Buffering marker class\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_STALL_STARTED, function() {\r\n      container.addClass(self.prefixCss(UIContainer.BUFFERING));\r\n    });\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_STALL_ENDED, function() {\r\n      container.removeClass(self.prefixCss(UIContainer.BUFFERING));\r\n    });\r\n    // Init buffering state\r\n    if (player.isStalled()) {\r\n      container.addClass(self.prefixCss(UIContainer.BUFFERING));\r\n    }\r\n\r\n    // Controls visibility marker class\r\n    uimanager.onControlsShow.subscribe(function() {\r\n      container.removeClass(self.prefixCss(UIContainer.CONTROLS_HIDDEN));\r\n      container.addClass(self.prefixCss(UIContainer.CONTROLS_SHOWN));\r\n    });\r\n    uimanager.onControlsHide.subscribe(function() {\r\n      container.removeClass(self.prefixCss(UIContainer.CONTROLS_SHOWN));\r\n      container.addClass(self.prefixCss(UIContainer.CONTROLS_HIDDEN));\r\n    });\r\n\r\n    // Layout size classes\r\n    let updateLayoutSizeClasses = function(width: number, height: number) {\r\n      container.removeClass(self.prefixCss('layout-max-width-400'));\r\n      container.removeClass(self.prefixCss('layout-max-width-600'));\r\n      container.removeClass(self.prefixCss('layout-max-width-800'));\r\n      container.removeClass(self.prefixCss('layout-max-width-1200'));\r\n\r\n      if (width <= 400) {\r\n        container.addClass(self.prefixCss('layout-max-width-400'));\r\n      } else if (width <= 600) {\r\n        container.addClass(self.prefixCss('layout-max-width-600'));\r\n      } else if (width <= 800) {\r\n        container.addClass(self.prefixCss('layout-max-width-800'));\r\n      } else if (width <= 1200) {\r\n        container.addClass(self.prefixCss('layout-max-width-1200'));\r\n      }\r\n    };\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PLAYER_RESIZE, function(e: PlayerResizeEvent) {\r\n      // Convert strings (with \"px\" suffix) to ints\r\n      let width = Math.round(Number(e.width.substring(0, e.width.length - 2)));\r\n      let height = Math.round(Number(e.height.substring(0, e.height.length - 2)));\r\n\r\n      updateLayoutSizeClasses(width, height);\r\n    });\r\n    // Init layout state\r\n    updateLayoutSizeClasses(new DOM(player.getFigure()).width(), new DOM(player.getFigure()).height());\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let self = this;\r\n    let container = super.toDomElement();\r\n\r\n    // Detect flexbox support (not supported in IE9)\r\n    if (document && typeof document.createElement('p').style.flex !== 'undefined') {\r\n      container.addClass(self.prefixCss('flexbox'));\r\n    } else {\r\n      container.addClass(self.prefixCss('no-flexbox'));\r\n    }\r\n\r\n    return container;\r\n  }\r\n}","import {SelectBox} from './selectbox';\r\nimport {ListSelectorConfig} from './listselector';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * A select box providing a selection between 'auto' and the available video qualities.\r\n */\r\nexport class VideoQualitySelectBox extends SelectBox {\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    let updateVideoQualities = function() {\r\n      let videoQualities = player.getAvailableVideoQualities();\r\n\r\n      self.clearItems();\r\n\r\n      // Add entry for automatic quality switching (default setting)\r\n      self.addItem('auto', 'auto');\r\n\r\n      // Add video qualities\r\n      for (let videoQuality of videoQualities) {\r\n        self.addItem(videoQuality.id, videoQuality.label);\r\n      }\r\n    };\r\n\r\n    self.onItemSelected.subscribe(function(sender: VideoQualitySelectBox, value: string) {\r\n      player.setVideoQuality(value);\r\n    });\r\n\r\n    // Update qualities when source goes away\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SOURCE_UNLOADED, updateVideoQualities);\r\n    // Update qualities when a new source is loaded\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_READY, updateVideoQualities);\r\n    // Update quality selection when quality is changed (from outside)\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_VIDEO_DOWNLOAD_QUALITY_CHANGED, function() {\r\n      let data = player.getDownloadedVideoData();\r\n      self.selectItem(data.isAuto ? 'auto' : data.id);\r\n    });\r\n\r\n    // Populate qualities at startup\r\n    updateVideoQualities();\r\n  }\r\n}","import {Container, ContainerConfig} from './container';\r\nimport {VolumeSlider} from './volumeslider';\r\nimport {VolumeToggleButton} from './volumetogglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {Timeout} from '../timeout';\r\n\r\n/**\r\n * Configuration interface for a {@link VolumeControlButton}.\r\n */\r\nexport interface VolumeControlButtonConfig extends ContainerConfig {\r\n  /**\r\n   * The delay after which the volume slider will be hidden when there is no user interaction.\r\n   * Care must be taken that the delay is long enough so users can reach the slider from the toggle button, e.g. by\r\n   * mouse movement. If the delay is too short, the sliders disappears before the mouse pointer has reached it and\r\n   * the user is not able to use it.\r\n   * Default: 500ms\r\n   */\r\n  hideDelay?: number;\r\n  /**\r\n   * Specifies if the volume slider should be vertically or horizontally aligned.\r\n   * Default: true\r\n   */\r\n  vertical?: boolean;\r\n}\r\n\r\n/**\r\n * A composite volume control that consists of and internally manages a volume control button that can be used\r\n * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.\r\n */\r\nexport class VolumeControlButton extends Container<VolumeControlButtonConfig> {\r\n\r\n  private volumeToggleButton: VolumeToggleButton;\r\n  private volumeSlider: VolumeSlider;\r\n\r\n  constructor(config: VolumeControlButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.volumeToggleButton = new VolumeToggleButton();\r\n    this.volumeSlider = new VolumeSlider({\r\n      vertical: config.vertical != null ? config.vertical : true,\r\n      hidden: true\r\n    });\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-volumecontrolbutton',\r\n      components: [this.volumeToggleButton, this.volumeSlider],\r\n      hideDelay: 500\r\n    }, <VolumeControlButtonConfig>this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n    let volumeToggleButton = this.getVolumeToggleButton();\r\n    let volumeSlider = this.getVolumeSlider();\r\n\r\n    let timeout = new Timeout((<VolumeControlButtonConfig>self.getConfig()).hideDelay, function() {\r\n      volumeSlider.hide();\r\n    });\r\n\r\n    /*\r\n     * Volume Slider visibility handling\r\n     *\r\n     * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the\r\n     * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider\r\n     * shall disappear.\r\n     */\r\n    let volumeSliderHovered = false;\r\n    volumeToggleButton.getDomElement().on('mouseenter', function() {\r\n      // Show volume slider when mouse enters the button area\r\n      if (volumeSlider.isHidden()) {\r\n        volumeSlider.show();\r\n      }\r\n      // Avoid hiding of the slider when button is hovered\r\n      timeout.clear();\r\n    });\r\n    volumeToggleButton.getDomElement().on('mouseleave', function() {\r\n      // Hide slider delayed when button is left\r\n      timeout.reset();\r\n    });\r\n    volumeSlider.getDomElement().on('mouseenter', function() {\r\n      // When the slider is entered, cancel the hide timeout activated by leaving the button\r\n      timeout.clear();\r\n      volumeSliderHovered = true;\r\n    });\r\n    volumeSlider.getDomElement().on('mouseleave', function() {\r\n      // When mouse leaves the slider, only hide it if there is no slide operation in progress\r\n      if (volumeSlider.isSeeking()) {\r\n        timeout.clear();\r\n      } else {\r\n        timeout.reset();\r\n      }\r\n      volumeSliderHovered = false;\r\n    });\r\n    volumeSlider.onSeeked.subscribe(function() {\r\n      // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed\r\n      if (!volumeSliderHovered) {\r\n        timeout.reset();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Provides access to the internally managed volume toggle button.\r\n   * @returns {VolumeToggleButton}\r\n   */\r\n  getVolumeToggleButton(): VolumeToggleButton {\r\n    return this.volumeToggleButton;\r\n  }\r\n\r\n  /**\r\n   * Provides access to the internally managed volume silder.\r\n   * @returns {VolumeSlider}\r\n   */\r\n  getVolumeSlider(): VolumeSlider {\r\n    return this.volumeSlider;\r\n  }\r\n}","import {SeekBar, SeekBarConfig} from './seekbar';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {Timeout} from '../timeout';\r\n\r\n/**\r\n * A simple volume slider component to adjust the player's volume setting.\r\n */\r\nexport class VolumeSlider extends SeekBar {\r\n\r\n  constructor(config: SeekBarConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-volumeslider'\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager, false);\r\n\r\n    let self = this;\r\n\r\n    let volumeChangeHandler = function() {\r\n      if (player.isMuted()) {\r\n        self.setPlaybackPosition(0);\r\n        self.setBufferPosition(0);\r\n      } else {\r\n        self.setPlaybackPosition(player.getVolume());\r\n\r\n        self.setBufferPosition(player.getVolume());\r\n      }\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_VOLUME_CHANGED, volumeChangeHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_MUTED, volumeChangeHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_UNMUTED, volumeChangeHandler);\r\n\r\n    this.onSeekPreview.subscribe(function(sender, args) {\r\n      if (args.scrubbing) {\r\n        player.setVolume(args.position);\r\n      }\r\n    });\r\n    this.onSeeked.subscribe(function(sender, percentage) {\r\n      player.setVolume(percentage);\r\n    });\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_PLAYER_RESIZE, function() {\r\n      self.refreshPlaybackPosition();\r\n    });\r\n\r\n    // Init volume bar\r\n    volumeChangeHandler();\r\n\r\n    // TODO find a better solution for this hack\r\n    /* At the time where this is called, the DOM element does not have a size yet, resulting in a zero offset of the\r\n     * volume slider knob, no matter what the actual volume setting on the player is. Out of lack of a way to\r\n     * detect when the element gets its size, we use this hack that actually seems to work on all browsers.\r\n     */\r\n    new Timeout(1, function () {\r\n      self.refreshPlaybackPosition();\r\n    }).start();\r\n  }\r\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport VolumeChangeEvent = bitmovin.player.VolumeChangeEvent;\r\n\r\n/**\r\n * A button that toggles audio muting.\r\n */\r\nexport class VolumeToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-volumetogglebutton',\r\n      text: 'Volume/Mute'\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    let muteStateHandler = function() {\r\n      if (player.isMuted()) {\r\n        self.on();\r\n      } else {\r\n        self.off();\r\n      }\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_MUTED, muteStateHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_UNMUTED, muteStateHandler);\r\n\r\n    self.onClick.subscribe(function() {\r\n      if (player.isMuted()) {\r\n        player.unmute();\r\n      } else {\r\n        player.mute();\r\n      }\r\n    });\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_VOLUME_CHANGED, function(event: VolumeChangeEvent) {\r\n      // Toggle low class to display low volume icon below 50% volume\r\n      if (event.targetVolume < 50) {\r\n        self.getDomElement().addClass(self.prefixCss('low'));\r\n      } else {\r\n        self.getDomElement().removeClass(self.prefixCss('low'));\r\n      }\r\n    });\r\n\r\n    // Startup init\r\n    muteStateHandler();\r\n  }\r\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\n\r\n/**\r\n * A button that toggles the video view between normal/mono and VR/stereo.\r\n */\r\nexport class VRToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-vrtogglebutton',\r\n      text: 'VR'\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: bitmovin.player.Player, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let self = this;\r\n\r\n    let isVRConfigured = function() {\r\n      // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not\r\n      // available at UI initialization. As an alternative, we check the VR settings in the config.\r\n      // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is\r\n      // available in ON_READY\r\n      let config = player.getConfig();\r\n      return config.source && config.source.vr && config.source.vr.contentType !== 'none';\r\n    };\r\n\r\n    let isVRStereoAvailable = function() {\r\n      return player.getVRStatus().contentType !== 'none';\r\n    };\r\n\r\n    let vrStateHandler = function() {\r\n      if (isVRConfigured() && isVRStereoAvailable()) {\r\n        self.show(); // show button in case it is hidden\r\n\r\n        if (player.getVRStatus().isStereo) {\r\n          self.on();\r\n        } else {\r\n          self.off();\r\n        }\r\n      } else {\r\n        self.hide(); // hide button if no stereo mode available\r\n      }\r\n    };\r\n\r\n    let vrButtonVisibilityHandler = function() {\r\n      if (isVRConfigured()) {\r\n        self.show();\r\n      } else {\r\n        self.hide();\r\n      }\r\n    };\r\n\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_VR_MODE_CHANGED, vrStateHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_VR_STEREO_CHANGED, vrStateHandler);\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_VR_ERROR, vrStateHandler);\r\n    // Hide button when VR source goes away\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_SOURCE_UNLOADED, vrButtonVisibilityHandler);\r\n    // Show button when a new source is loaded and it's VR\r\n    player.addEventHandler(bitmovin.player.EVENT.ON_READY, vrButtonVisibilityHandler);\r\n\r\n    self.onClick.subscribe(function() {\r\n      if (!isVRStereoAvailable()) {\r\n        if (console) {\r\n          console.log('No VR content');\r\n        }\r\n      } else {\r\n        if (player.getVRStatus().isStereo) {\r\n          player.setVRStereo(false);\r\n        } else {\r\n          player.setVRStereo(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Set startup visibility\r\n    vrButtonVisibilityHandler();\r\n  }\r\n}","import {ClickOverlay, ClickOverlayConfig} from './clickoverlay';\r\n\r\n/**\r\n * Configuration interface for a {@link ClickOverlay}.\r\n */\r\nexport interface WatermarkConfig extends ClickOverlayConfig {\r\n  // nothing yet\r\n}\r\n\r\n/**\r\n * A watermark overlay with a clickable logo.\r\n */\r\nexport class Watermark extends ClickOverlay {\r\n\r\n  constructor(config: WatermarkConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-watermark',\r\n      url: 'http://bitmovin.com'\r\n    }, <WatermarkConfig>this.config);\r\n  }\r\n}","export interface Offset {\r\n  left: number;\r\n  top: number;\r\n}\r\n\r\n/**\r\n * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).\r\n *\r\n * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM\r\n * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar\r\n * to jQuery, setters usually affect all elements, while getters operate on only the first element.\r\n * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method\r\n * calls.\r\n *\r\n * Built with the help of: http://youmightnotneedjquery.com/\r\n */\r\nexport class DOM {\r\n\r\n  private document: Document;\r\n\r\n  /**\r\n   * The list of elements that the instance wraps. Take care that not all methods can operate on the whole list,\r\n   * getters usually just work on the first element.\r\n   */\r\n  private elements: HTMLElement[];\r\n\r\n  /**\r\n   * Creates a DOM element.\r\n   * @param tagName the tag name of the DOM element\r\n   * @param attributes a list of attributes of the element\r\n   */\r\n  constructor(tagName: string, attributes: {[name: string]: string});\r\n  /**\r\n   * Selects all elements from the DOM that match the specified selector.\r\n   * @param selector the selector to match DOM elements with\r\n   */\r\n  constructor(selector: string);\r\n  /**\r\n   * Wraps a plain HTMLElement with a DOM instance.\r\n   * @param element the HTMLElement to wrap with DOM\r\n   */\r\n  constructor(element: HTMLElement);\r\n  /**\r\n   * Wraps a list of plain HTMLElements with a DOM instance.\r\n   * @param element the HTMLElements to wrap with DOM\r\n   */\r\n  constructor(elements: HTMLElement[]);\r\n  /**\r\n   * Wraps the document with a DOM instance. Useful to attach event listeners to the document.\r\n   * @param document the document to wrap\r\n   */\r\n  constructor(document: Document);\r\n  constructor(something: string | HTMLElement | HTMLElement[] | Document, attributes?: {[name: string]: string}) {\r\n    this.document = document; // Set the global document to the local document field\r\n\r\n    if (something instanceof Array) {\r\n      if (something.length > 0 && something[0] instanceof HTMLElement) {\r\n        let elements = something;\r\n        this.elements = elements;\r\n      }\r\n    }\r\n    else if (something instanceof HTMLElement) {\r\n      let element = something;\r\n      this.elements = [element];\r\n    }\r\n    else if (something instanceof Document) {\r\n      // When a document is passed in, we do not do anything with it, but by setting this.elements to null\r\n      // we give the event handling method a means to detect if the events should be registered on the document\r\n      // instead of elements.\r\n      this.elements = null;\r\n    }\r\n    else if (attributes) {\r\n      let tagName = something;\r\n      let element = document.createElement(tagName);\r\n\r\n      for (let attributeName in attributes) {\r\n        let attributeValue = attributes[attributeName];\r\n        element.setAttribute(attributeName, attributeValue);\r\n      }\r\n\r\n      this.elements = [element];\r\n    }\r\n    else {\r\n      let selector = something;\r\n      this.elements = this.findChildElements(selector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the number of elements that this DOM instance currently holds.\r\n   * @returns {number} the number of elements\r\n   */\r\n  get length(): number {\r\n    return this.elements ? this.elements.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Gets the HTML elements that this DOM instance currently holds.\r\n   * @returns {HTMLElement[]} the raw HTML elements\r\n   */\r\n  getElements(): HTMLElement[] {\r\n    return this.elements;\r\n  }\r\n\r\n  /**\r\n   * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).\r\n   * @param handler the handler to execute an operation on an element\r\n   */\r\n  private forEach(handler: (element: HTMLElement) => void): void {\r\n    this.elements.forEach(function(element) {\r\n      handler(element);\r\n    });\r\n  }\r\n\r\n  private findChildElementsOfElement(element: HTMLElement | Document, selector: string): HTMLElement[] {\r\n    let childElements = element.querySelectorAll(selector);\r\n\r\n    // Convert NodeList to Array\r\n    // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/\r\n    return [].slice.call(childElements);\r\n  }\r\n\r\n  private findChildElements(selector: string): HTMLElement[] {\r\n    let self = this;\r\n    let allChildElements = <HTMLElement[]>[];\r\n\r\n    if (this.elements) {\r\n      this.forEach(function(element) {\r\n        allChildElements = allChildElements.concat(self.findChildElementsOfElement(element, selector));\r\n      });\r\n    }\r\n    else {\r\n      return this.findChildElementsOfElement(document, selector);\r\n    }\r\n\r\n    return allChildElements;\r\n  }\r\n\r\n  /**\r\n   * Finds all child elements of all elements matching the supplied selector.\r\n   * @param selector the selector to match with child elements\r\n   * @returns {DOM} a new DOM instance representing all matched children\r\n   */\r\n  find(selector: string): DOM {\r\n    let allChildElements = this.findChildElements(selector);\r\n    return new DOM(allChildElements);\r\n  }\r\n\r\n  /**\r\n   * Returns a string of the inner HTML content of the first element.\r\n   */\r\n  html(): string;\r\n  /**\r\n   * Sets the inner HTML content of all elements.\r\n   * @param content a string of plain text or HTML markup\r\n   */\r\n  html(content: string): DOM;\r\n  html(content?: string): string | DOM {\r\n    if (arguments.length > 0) {\r\n      return this.setHtml(content);\r\n    }\r\n    else {\r\n      return this.getHtml();\r\n    }\r\n  }\r\n\r\n  private getHtml(): string | null {\r\n    return this.elements[0].innerHTML;\r\n  }\r\n\r\n  private setHtml(content: string): DOM {\r\n    if (content === undefined || content == null) {\r\n      // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)\r\n      content = '';\r\n    }\r\n\r\n    this.forEach(function(element) {\r\n      element.innerHTML = content;\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Clears the inner HTML of all elements (deletes all children).\r\n   * @returns {DOM}\r\n   */\r\n  empty(): DOM {\r\n    this.forEach(function(element) {\r\n      element.innerHTML = '';\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an\r\n   * input field.\r\n   * @returns {string} the value of a form element\r\n   */\r\n  val(): string {\r\n    let element = this.elements[0];\r\n\r\n    if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {\r\n      return element.value;\r\n    }\r\n    else {\r\n      // TODO add support for missing form elements\r\n      throw new Error(`val() not supported for ${typeof element}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the value of an attribute on the first element.\r\n   * @param attribute\r\n   */\r\n  attr(attribute: string): string | null;\r\n  /**\r\n   * Sets an attribute on all elements.\r\n   * @param attribute the name of the attribute\r\n   * @param value the value of the attribute\r\n   */\r\n  attr(attribute: string, value: string): DOM;\r\n  attr(attribute: string, value?: string): string | null | DOM {\r\n    if (arguments.length > 1) {\r\n      return this.setAttr(attribute, value);\r\n    }\r\n    else {\r\n      return this.getAttr(attribute);\r\n    }\r\n  }\r\n\r\n  private getAttr(attribute: string): string | null {\r\n    return this.elements[0].getAttribute(attribute);\r\n  }\r\n\r\n  private setAttr(attribute: string, value: string): DOM {\r\n    this.forEach(function(element) {\r\n      element.setAttribute(attribute, value);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the value of a data element on the first element.\r\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\r\n   */\r\n  data(dataAttribute: string): string | null;\r\n  /**\r\n   * Sets a data attribute on all elements.\r\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\r\n   * @param value the value of the data attribute\r\n   */\r\n  data(dataAttribute: string, value: string): DOM;\r\n  data(dataAttribute: string, value?: string): string | null | DOM {\r\n    if (arguments.length > 1) {\r\n      return this.setData(dataAttribute, value);\r\n    }\r\n    else {\r\n      return this.getData(dataAttribute);\r\n    }\r\n  }\r\n\r\n  private getData(dataAttribute: string): string | null {\r\n    return this.elements[0].getAttribute('data-' + dataAttribute);\r\n  }\r\n\r\n  private setData(dataAttribute: string, value: string): DOM {\r\n    this.forEach(function(element) {\r\n      element.setAttribute('data-' + dataAttribute, value);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Appends one or more DOM elements as children to all elements.\r\n   * @param childElements the chrild elements to append\r\n   * @returns {DOM}\r\n   */\r\n  append(...childElements: DOM[]): DOM {\r\n    this.forEach(function(element) {\r\n      childElements.forEach(function(childElement) {\r\n        childElement.elements.forEach(function(_, index) {\r\n          element.appendChild(childElement.elements[index]);\r\n        });\r\n      });\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all elements from the DOM.\r\n   */\r\n  remove(): void {\r\n    this.forEach(function(element) {\r\n      let parent = element.parentNode;\r\n      if (parent) {\r\n        parent.removeChild(element);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the offset of the first element from the document's top left corner.\r\n   * @returns {Offset}\r\n   */\r\n  offset(): Offset {\r\n    let element = this.elements[0];\r\n    let elementRect = element.getBoundingClientRect();\r\n    let htmlRect = document.body.parentElement.getBoundingClientRect();\r\n\r\n    // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)\r\n    // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different\r\n    // element.getBoundingClientRect() results:\r\n    //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset\r\n    //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes\r\n    // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset\r\n    // from the document's upper left origin when pinch zoom is used.\r\n    // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and\r\n    // subtract it from the element's rect, which always results in the offset from the document origin.\r\n    // NOTE: the current way of offset calculation was implemented specifically to track event positions on the\r\n    // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a\r\n    // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.\r\n\r\n    return {\r\n      top: elementRect.top - htmlRect.top,\r\n      left: elementRect.left - htmlRect.left\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the first element.\r\n   * @returns {number} the width of the first element\r\n   */\r\n  width(): number {\r\n    // TODO check if this is the same as jQuery's width() (probably not)\r\n    return this.elements[0].offsetWidth;\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the first element.\r\n   * @returns {number} the height of the first element\r\n   */\r\n  height(): number {\r\n    // TODO check if this is the same as jQuery's height() (probably not)\r\n    return this.elements[0].offsetHeight;\r\n  }\r\n\r\n  /**\r\n   * Attaches an event handler to one or more events on all elements.\r\n   * @param eventName the event name (or multiple names separated by space) to listen to\r\n   * @param eventHandler the event handler to call when the event fires\r\n   * @returns {DOM}\r\n   */\r\n  on(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\r\n    let events = eventName.split(' ');\r\n    let self = this;\r\n\r\n    events.forEach(function(event) {\r\n      if (self.elements == null) {\r\n        self.document.addEventListener(event, eventHandler);\r\n      }\r\n      else {\r\n        self.forEach(function(element) {\r\n          element.addEventListener(event, eventHandler);\r\n        });\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes an event handler from one or more events on all elements.\r\n   * @param eventName the event name (or multiple names separated by space) to remove the handler from\r\n   * @param eventHandler the event handler to remove\r\n   * @returns {DOM}\r\n   */\r\n  off(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\r\n    let events = eventName.split(' ');\r\n    let self = this;\r\n\r\n    events.forEach(function(event) {\r\n      if (self.elements == null) {\r\n        self.document.removeEventListener(event, eventHandler);\r\n      }\r\n      else {\r\n        self.forEach(function(element) {\r\n          element.removeEventListener(event, eventHandler);\r\n        });\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds the specified class(es) to all elements.\r\n   * @param className the class(es) to add, multiple classes separated by space\r\n   * @returns {DOM}\r\n   */\r\n  addClass(className: string): DOM {\r\n    this.forEach(function(element) {\r\n      if (element.classList) {\r\n        element.classList.add(className);\r\n      }\r\n      else {\r\n        element.className += ' ' + className;\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removed the specified class(es) from all elements.\r\n   * @param className the class(es) to remove, multiple classes separated by space\r\n   * @returns {DOM}\r\n   */\r\n  removeClass(className: string): DOM {\r\n    this.forEach(function(element) {\r\n      if (element.classList) {\r\n        element.classList.remove(className);\r\n      }\r\n      else {\r\n        element.className = element.className.replace(\r\n          new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks if any of the elements has the specified class.\r\n   * @param className the class name to check\r\n   * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached\r\n   */\r\n  hasClass(className: string): boolean {\r\n    let hasClass = false;\r\n\r\n    this.forEach(function(element) {\r\n      if (element.classList) {\r\n        if (element.classList.contains(className)) {\r\n          // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable\r\n          // and return it at the end of the function body.\r\n          hasClass = true;\r\n        }\r\n      }\r\n      else {\r\n        if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {\r\n          // See comment above\r\n          hasClass = true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return hasClass;\r\n  }\r\n\r\n  /**\r\n   * Returns the value of a CSS property of the first element.\r\n   * @param propertyName the name of the CSS property to retrieve the value of\r\n   */\r\n  css(propertyName: string): string | null;\r\n  /**\r\n   * Sets the value of a CSS property on all elements.\r\n   * @param propertyName the name of the CSS property to set the value for\r\n   * @param value the value to set for the given CSS property\r\n   */\r\n  css(propertyName: string, value: string): DOM;\r\n  /**\r\n   * Sets a collection of CSS properties and their values on all elements.\r\n   * @param propertyValueCollection an object containing pairs of property names and their values\r\n   */\r\n  css(propertyValueCollection: {[propertyName: string]: string}): DOM;\r\n  css(propertyNameOrCollection: string | {[propertyName: string]: string}, value?: string): string | null | DOM {\r\n    if (typeof propertyNameOrCollection === 'string') {\r\n      let propertyName = propertyNameOrCollection;\r\n\r\n      if (arguments.length === 2) {\r\n        return this.setCss(propertyName, value);\r\n      }\r\n      else {\r\n        return this.getCss(propertyName);\r\n      }\r\n    }\r\n    else {\r\n      let propertyValueCollection = propertyNameOrCollection;\r\n      return this.setCssCollection(propertyValueCollection);\r\n    }\r\n  }\r\n\r\n  private getCss(propertyName: string): string | null {\r\n    return getComputedStyle(this.elements[0])[<any>propertyName];\r\n  }\r\n\r\n  private setCss(propertyName: string, value: string): DOM {\r\n    this.forEach(function(element) {\r\n      // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252\r\n      element.style[<any>propertyName] = value;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  private setCssCollection(ruleValueCollection: {[ruleName: string]: string}): DOM {\r\n    this.forEach(function(element) {\r\n      // http://stackoverflow.com/a/34490573/370252\r\n      Object.assign(element.style, ruleValueCollection);\r\n    });\r\n\r\n    return this;\r\n  }\r\n}\r\n","import {ArrayUtils} from './utils';\r\n/**\r\n * Function interface for event listeners on the {@link EventDispatcher}.\r\n */\r\nexport interface EventListener<Sender, Args> {\r\n  (sender: Sender, args: Args): void;\r\n}\r\n\r\n/**\r\n * Empty type for creating {@link EventDispatcher event dispatchers} that do not carry any arguments.\r\n */\r\nexport interface NoArgs {\r\n}\r\n\r\n/**\r\n * Public interface that represents an event. Can be used to subscribe to and unsubscribe from events.\r\n */\r\nexport interface Event<Sender, Args> {\r\n  /**\r\n   * Subscribes an event listener to this event dispatcher.\r\n   * @param listener the listener to add\r\n   */\r\n  subscribe(listener: EventListener<Sender, Args>): void;\r\n\r\n  /**\r\n   * Subscribes an event listener to this event dispatcher that is only called once.\r\n   * @param listener the listener to add\r\n   */\r\n  subscribeOnce(listener: EventListener<Sender, Args>): void;\r\n\r\n  /**\r\n   * Subscribes an event listener to this event dispatcher that will be called at a limited rate with a minimum\r\n   * interval of the specified milliseconds.\r\n   * @param listener the listener to add\r\n   * @param rateMs the rate in milliseconds to which calling of the listeners should be limited\r\n   */\r\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number): void;\r\n\r\n  /**\r\n   * Unsubscribes a subscribed event listener from this dispatcher.\r\n   * @param listener the listener to remove\r\n   * @returns {boolean} true if the listener was successfully unsubscribed, false if it isn't subscribed on this\r\n   *   dispatcher\r\n   */\r\n  unsubscribe(listener: EventListener<Sender, Args>): boolean;\r\n}\r\n\r\n/**\r\n * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.\r\n */\r\nexport class EventDispatcher<Sender, Args> implements Event<Sender, Args> {\r\n\r\n  private listeners: EventListenerWrapper<Sender, Args>[] = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  subscribe(listener: EventListener<Sender, Args>) {\r\n    this.listeners.push(new EventListenerWrapper(listener));\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  subscribeOnce(listener: EventListener<Sender, Args>) {\r\n    this.listeners.push(new EventListenerWrapper(listener, true));\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number) {\r\n    this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  unsubscribe(listener: EventListener<Sender, Args>): boolean {\r\n    // Iterate through listeners, compare with parameter, and remove if found\r\n    for (let i = 0; i < this.listeners.length; i++) {\r\n      let subscribedListener = this.listeners[i];\r\n      if (subscribedListener.listener === listener) {\r\n        ArrayUtils.remove(this.listeners, subscribedListener);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Removes all listeners from this dispatcher.\r\n   */\r\n  unsubscribeAll(): void {\r\n    this.listeners = [];\r\n  }\r\n\r\n  /**\r\n   * Dispatches an event to all subscribed listeners.\r\n   * @param sender the source of the event\r\n   * @param args the arguments for the event\r\n   */\r\n  dispatch(sender: Sender, args: Args = null) {\r\n    let listenersToRemove = [];\r\n\r\n    // Call every listener\r\n    for (let listener of this.listeners) {\r\n      listener.fire(sender, args);\r\n\r\n      if (listener.isOnce()) {\r\n        listenersToRemove.push(listener);\r\n      }\r\n    }\r\n\r\n    // Remove one-time listener\r\n    for (let listenerToRemove of listenersToRemove) {\r\n      ArrayUtils.remove(this.listeners, listenerToRemove);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.\r\n   * @returns {Event}\r\n   */\r\n  getEvent(): Event<Sender, Args> {\r\n    // For now, just case the event dispatcher to the event interface. At some point in the future when the\r\n    // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.\r\n    return <Event<Sender, Args>>this;\r\n  }\r\n}\r\n\r\n/**\r\n * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class\r\n * for internal dispatcher use and it is therefore not exported.\r\n */\r\nclass EventListenerWrapper<Sender, Args> {\r\n\r\n  private eventListener: EventListener<Sender, Args>;\r\n  private once: boolean;\r\n\r\n  constructor(listener: EventListener<Sender, Args>, once: boolean = false) {\r\n    this.eventListener = listener;\r\n    this.once = once;\r\n  }\r\n\r\n  /**\r\n   * Returns the wrapped event listener.\r\n   * @returns {EventListener<Sender, Args>}\r\n   */\r\n  get listener(): EventListener<Sender, Args> {\r\n    return this.eventListener;\r\n  }\r\n\r\n  /**\r\n   * Fires the wrapped event listener with the given arguments.\r\n   * @param sender\r\n   * @param args\r\n   */\r\n  fire(sender: Sender, args: Args) {\r\n    this.eventListener(sender, args);\r\n  }\r\n\r\n  /**\r\n   * Checks if this listener is scheduled to be called only once.\r\n   * @returns {boolean} once if true\r\n   */\r\n  isOnce(): boolean {\r\n    return this.once;\r\n  }\r\n}\r\n\r\n/**\r\n * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.\r\n */\r\nclass RateLimitedEventListenerWrapper<Sender, Args> extends EventListenerWrapper<Sender, Args> {\r\n\r\n  private rateMs: number;\r\n  private rateLimitingEventListener: EventListener<Sender, Args>;\r\n\r\n  private lastFireTime: number;\r\n\r\n  constructor(listener: EventListener<Sender, Args>, rateMs: number) {\r\n    super(listener); // sets the event listener sink\r\n\r\n    this.rateMs = rateMs;\r\n    this.lastFireTime = 0;\r\n\r\n    // Wrap the event listener with an event listener that does the rate-limiting\r\n    this.rateLimitingEventListener = function(sender: Sender, args: Args) {\r\n      if (Date.now() - this.lastFireTime > this.rateMs) {\r\n        // Only if enough time since the previous call has passed, call the\r\n        // actual event listener and record the current time\r\n        this.fireSuper(sender, args);\r\n        this.lastFireTime = Date.now();\r\n      }\r\n    };\r\n  }\r\n\r\n  private fireSuper(sender: Sender, args: Args) {\r\n    // Fire the actual external event listener\r\n    super.fire(sender, args);\r\n  }\r\n\r\n  fire(sender: Sender, args: Args) {\r\n    // Fire the internal rate-limiting listener instead of the external event listener\r\n    this.rateLimitingEventListener(sender, args);\r\n  }\r\n}","export namespace Guid {\r\n\r\n  let guid = 1;\r\n\r\n  export function next() {\r\n    return guid++;\r\n  }\r\n}\r\n","/// <reference path='player.d.ts' />\r\n/// <reference path='../../node_modules/@types/core-js/index.d.ts' />\r\nimport {UIManager, UIInstanceManager} from './uimanager';\r\nimport {Button} from './components/button';\r\nimport {ControlBar} from './components/controlbar';\r\nimport {FullscreenToggleButton} from './components/fullscreentogglebutton';\r\nimport {HugePlaybackToggleButton} from './components/hugeplaybacktogglebutton';\r\nimport {PlaybackTimeLabel, PlaybackTimeLabelMode} from './components/playbacktimelabel';\r\nimport {PlaybackToggleButton} from './components/playbacktogglebutton';\r\nimport {SeekBar} from './components/seekbar';\r\nimport {SelectBox} from './components/selectbox';\r\nimport {SettingsPanel, SettingsPanelItem} from './components/settingspanel';\r\nimport {SettingsToggleButton} from './components/settingstogglebutton';\r\nimport {ToggleButton} from './components/togglebutton';\r\nimport {VideoQualitySelectBox} from './components/videoqualityselectbox';\r\nimport {VolumeToggleButton} from './components/volumetogglebutton';\r\nimport {VRToggleButton} from './components/vrtogglebutton';\r\nimport {Watermark} from './components/watermark';\r\nimport {UIContainer} from './components/uicontainer';\r\nimport {Container} from './components/container';\r\nimport {Label} from './components/label';\r\nimport {AudioQualitySelectBox} from './components/audioqualityselectbox';\r\nimport {AudioTrackSelectBox} from './components/audiotrackselectbox';\r\nimport {CastStatusOverlay} from './components/caststatusoverlay';\r\nimport {CastToggleButton} from './components/casttogglebutton';\r\nimport {Component} from './components/component';\r\nimport {ErrorMessageOverlay} from './components/errormessageoverlay';\r\nimport {RecommendationOverlay} from './components/recommendationoverlay';\r\nimport {SeekBarLabel} from './components/seekbarlabel';\r\nimport {SubtitleOverlay} from './components/subtitleoverlay';\r\nimport {SubtitleSelectBox} from './components/subtitleselectbox';\r\nimport {TitleBar} from './components/titlebar';\r\nimport {VolumeControlButton} from './components/volumecontrolbutton';\r\nimport {ClickOverlay} from './components/clickoverlay';\r\nimport {AdSkipButton} from './components/adskipbutton';\r\nimport {AdMessageLabel} from './components/admessagelabel';\r\nimport {AdClickOverlay} from './components/adclickoverlay';\r\nimport {PlaybackSpeedSelectBox} from './components/playbackspeedselectbox';\r\nimport {HugeReplayButton} from './components/hugereplaybutton';\r\nimport {BufferingOverlay} from './components/bufferingoverlay';\r\nimport {CastUIContainer} from './components/castuicontainer';\r\nimport {PlaybackToggleOverlay} from './components/playbacktoggleoverlay';\r\nimport {CloseButton} from './components/closebutton';\r\nimport {MetadataLabel, MetadataLabelContent} from './components/metadatalabel';\r\nimport {VolumeSlider} from './components/volumeslider';\r\n\r\n// Object.assign polyfill for ES5/IE9\r\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\nif (typeof Object.assign !== 'function') {\r\n  Object.assign = function(target: any) {\r\n    'use strict';\r\n    if (target == null) {\r\n      throw new TypeError('Cannot convert undefined or null to object');\r\n    }\r\n\r\n    target = Object(target);\r\n    for (let index = 1; index < arguments.length; index++) {\r\n      let source = arguments[index];\r\n      if (source != null) {\r\n        for (let key in source) {\r\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n            target[key] = source[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n}\r\n\r\n// Expose classes to window\r\n(window as any).bitmovin.playerui = {\r\n  // Management\r\n  UIManager,\r\n  UIInstanceManager,\r\n  // Components\r\n  AdClickOverlay,\r\n  AdMessageLabel,\r\n  AdSkipButton,\r\n  AudioQualitySelectBox,\r\n  AudioTrackSelectBox,\r\n  BufferingOverlay,\r\n  Button,\r\n  CastStatusOverlay,\r\n  CastToggleButton,\r\n  CastUIContainer,\r\n  ClickOverlay,\r\n  CloseButton,\r\n  Component,\r\n  Container,\r\n  ControlBar,\r\n  ErrorMessageOverlay,\r\n  FullscreenToggleButton,\r\n  HugePlaybackToggleButton,\r\n  HugeReplayButton,\r\n  Label,\r\n  MetadataLabel,\r\n  MetadataLabelContent,\r\n  PlaybackSpeedSelectBox,\r\n  PlaybackTimeLabel,\r\n  PlaybackTimeLabelMode,\r\n  PlaybackToggleButton,\r\n  PlaybackToggleOverlay,\r\n  RecommendationOverlay,\r\n  SeekBar,\r\n  SeekBarLabel,\r\n  SelectBox,\r\n  SettingsPanel,\r\n  SettingsPanelItem,\r\n  SettingsToggleButton,\r\n  SubtitleOverlay,\r\n  SubtitleSelectBox,\r\n  TitleBar,\r\n  ToggleButton,\r\n  UIContainer,\r\n  VideoQualitySelectBox,\r\n  VolumeControlButton,\r\n  VolumeSlider,\r\n  VolumeToggleButton,\r\n  VRToggleButton,\r\n  Watermark,\r\n};","// TODO change to internal (not exported) class, how to use in other files?\r\n/**\r\n * Executes a callback after a specified amount of time, optionally repeatedly until stopped.\r\n */\r\nexport class Timeout {\r\n\r\n  private delay: number;\r\n  private callback: () => void;\r\n  private repeat: boolean;\r\n  private timeoutHandle: number;\r\n\r\n  /**\r\n   * Creates a new timeout callback handler.\r\n   * @param delay the delay in milliseconds after which the callback should be executed\r\n   * @param callback the callback to execute after the delay time\r\n   * @param repeat if true, call the callback repeatedly in delay intervals\r\n   */\r\n  constructor(delay: number, callback: () => void, repeat: boolean = false) {\r\n    this.delay = delay;\r\n    this.callback = callback;\r\n    this.repeat = repeat;\r\n    this.timeoutHandle = 0;\r\n  }\r\n\r\n  /**\r\n   * Starts the timeout and calls the callback when the timeout delay has passed.\r\n   */\r\n  start(): void {\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Clears the timeout. The callback will not be called if clear is called during the timeout.\r\n   */\r\n  clear(): void {\r\n    clearTimeout(this.timeoutHandle);\r\n  }\r\n\r\n  /**\r\n   * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.\r\n   */\r\n  reset(): void {\r\n    let self = this;\r\n    let lastScheduleTime = 0;\r\n    let delayAdjust = 0;\r\n\r\n    this.clear();\r\n\r\n    let internalCallback = function() {\r\n      self.callback();\r\n\r\n      if (self.repeat) {\r\n        let now = Date.now();\r\n\r\n        // The time of one iteration from scheduling to executing the callback (usually a bit longer than the delay\r\n        // time)\r\n        let delta = now - lastScheduleTime;\r\n\r\n        // Calculate the delay adjustment for the next schedule to keep a steady delay interval over time\r\n        delayAdjust = self.delay - delta + delayAdjust;\r\n\r\n        lastScheduleTime = now;\r\n\r\n        // Schedule next execution by the adjusted delay\r\n        self.timeoutHandle = setTimeout(internalCallback, self.delay + delayAdjust);\r\n      }\r\n    };\r\n\r\n    lastScheduleTime = Date.now();\r\n    this.timeoutHandle = setTimeout(internalCallback, this.delay);\r\n  }\r\n}","import {UIContainer} from './components/uicontainer';\r\nimport {DOM} from './dom';\r\nimport {Component, ComponentConfig} from './components/component';\r\nimport {Container} from './components/container';\r\nimport {PlaybackToggleButton} from './components/playbacktogglebutton';\r\nimport {FullscreenToggleButton} from './components/fullscreentogglebutton';\r\nimport {VRToggleButton} from './components/vrtogglebutton';\r\nimport {VolumeToggleButton} from './components/volumetogglebutton';\r\nimport {SeekBar} from './components/seekbar';\r\nimport {PlaybackTimeLabel, PlaybackTimeLabelMode} from './components/playbacktimelabel';\r\nimport {ControlBar} from './components/controlbar';\r\nimport {NoArgs, EventDispatcher} from './eventdispatcher';\r\nimport {SettingsToggleButton} from './components/settingstogglebutton';\r\nimport {SettingsPanel, SettingsPanelItem} from './components/settingspanel';\r\nimport {VideoQualitySelectBox} from './components/videoqualityselectbox';\r\nimport {Watermark} from './components/watermark';\r\nimport {AudioQualitySelectBox} from './components/audioqualityselectbox';\r\nimport {AudioTrackSelectBox} from './components/audiotrackselectbox';\r\nimport {SeekBarLabel} from './components/seekbarlabel';\r\nimport {VolumeSlider} from './components/volumeslider';\r\nimport {SubtitleSelectBox} from './components/subtitleselectbox';\r\nimport {SubtitleOverlay} from './components/subtitleoverlay';\r\nimport {VolumeControlButton} from './components/volumecontrolbutton';\r\nimport {CastToggleButton} from './components/casttogglebutton';\r\nimport {CastStatusOverlay} from './components/caststatusoverlay';\r\nimport {ErrorMessageOverlay} from './components/errormessageoverlay';\r\nimport {TitleBar} from './components/titlebar';\r\nimport Player = bitmovin.player.Player;\r\nimport {RecommendationOverlay} from './components/recommendationoverlay';\r\nimport {AdMessageLabel} from './components/admessagelabel';\r\nimport {AdSkipButton} from './components/adskipbutton';\r\nimport {AdClickOverlay} from './components/adclickoverlay';\r\nimport EVENT = bitmovin.player.EVENT;\r\nimport PlayerEventCallback = bitmovin.player.PlayerEventCallback;\r\nimport AdStartedEvent = bitmovin.player.AdStartedEvent;\r\nimport {ArrayUtils} from './utils';\r\nimport {PlaybackSpeedSelectBox} from './components/playbackspeedselectbox';\r\nimport {BufferingOverlay} from './components/bufferingoverlay';\r\nimport {CastUIContainer} from './components/castuicontainer';\r\nimport {PlaybackToggleOverlay} from './components/playbacktoggleoverlay';\r\nimport {CloseButton} from './components/closebutton';\r\nimport {MetadataLabel, MetadataLabelContent} from './components/metadatalabel';\r\nimport {Label} from './components/label';\r\nimport PlayerEvent = bitmovin.player.PlayerEvent;\r\n\r\nexport interface UIRecommendationConfig {\r\n  title: string;\r\n  url: string;\r\n  thumbnail?: string;\r\n  duration?: number;\r\n}\r\n\r\nexport interface TimelineMarker {\r\n  time: number;\r\n  title?: string;\r\n}\r\n\r\nexport interface UIConfig {\r\n  metadata?: {\r\n    title?: string;\r\n    description?: string;\r\n    markers?: TimelineMarker[];\r\n  };\r\n  recommendations?: UIRecommendationConfig[];\r\n}\r\n\r\nexport class UIManager {\r\n\r\n  private player: Player;\r\n  private playerElement: DOM;\r\n  private playerUi: InternalUIInstanceManager;\r\n  private adsUi: InternalUIInstanceManager;\r\n  private config: UIConfig;\r\n  private managerPlayerWrapper: PlayerWrapper;\r\n\r\n  constructor(player: Player, playerUi: UIContainer, adsUi: UIContainer, config: UIConfig = {}) {\r\n    this.player = player;\r\n    this.config = config;\r\n\r\n    if (!config.metadata) {\r\n      config.metadata = {\r\n        title: player.getConfig().source ? player.getConfig().source.title : null,\r\n        description: player.getConfig().source ? player.getConfig().source.description : null,\r\n      };\r\n    }\r\n\r\n    this.playerUi = new InternalUIInstanceManager(player, playerUi, config);\r\n\r\n    this.managerPlayerWrapper = new PlayerWrapper(player);\r\n\r\n    this.playerElement = new DOM(player.getFigure());\r\n\r\n    // Add UI elements to player\r\n    this.addUi(this.playerUi);\r\n\r\n    let self = this;\r\n\r\n    // Ads UI\r\n    if (adsUi) {\r\n      this.adsUi = new InternalUIInstanceManager(player, adsUi, config);\r\n      let adsUiAdded = false;\r\n\r\n      let enterAdsUi = function(event: AdStartedEvent) {\r\n        playerUi.hide();\r\n\r\n        // Display the ads UI (only for VAST ads, other clients bring their own UI)\r\n        if (event.clientType === 'vast') {\r\n          // Add ads UI when it is needed for the first time\r\n          if (!adsUiAdded) {\r\n            self.addUi(self.adsUi);\r\n            adsUiAdded = true;\r\n\r\n            /* Relay the ON_AD_STARTED event to the ads UI\r\n             *\r\n             * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has\r\n             * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.\r\n             * Since this can break functionality of components that rely on this event, we relay the event to the\r\n             * ads UI components with the following call.\r\n             */\r\n            self.adsUi.getWrappedPlayer().fireEventInUI(bitmovin.player.EVENT.ON_AD_STARTED, event);\r\n          }\r\n\r\n          adsUi.show();\r\n        }\r\n      };\r\n\r\n      let exitAdsUi = function() {\r\n        if (adsUiAdded) {\r\n          adsUi.hide();\r\n        }\r\n        playerUi.show();\r\n      };\r\n\r\n      // React to ad events from the player\r\n      this.managerPlayerWrapper.getPlayer().addEventHandler(EVENT.ON_AD_STARTED, enterAdsUi);\r\n      this.managerPlayerWrapper.getPlayer().addEventHandler(EVENT.ON_AD_FINISHED, exitAdsUi);\r\n      this.managerPlayerWrapper.getPlayer().addEventHandler(EVENT.ON_AD_SKIPPED, exitAdsUi);\r\n      this.managerPlayerWrapper.getPlayer().addEventHandler(EVENT.ON_AD_ERROR, exitAdsUi);\r\n    }\r\n  }\r\n\r\n  getConfig(): UIConfig {\r\n    return this.config;\r\n  }\r\n\r\n  private configureControls(component: Component<ComponentConfig>, manager: UIInstanceManager) {\r\n    component.initialize();\r\n    component.configure(manager.getPlayer(), manager);\r\n\r\n    if (component instanceof Container) {\r\n      for (let childComponent of component.getComponents()) {\r\n        this.configureControls(childComponent, manager);\r\n      }\r\n    }\r\n  }\r\n\r\n  private addUi(ui: InternalUIInstanceManager): void {\r\n    let dom = ui.getUI().getDomElement();\r\n    this.configureControls(ui.getUI(), ui);\r\n    /* Append the UI DOM after configuration to avoid CSS transitions at initialization\r\n     * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are\r\n     * undesirable at this time. */\r\n    this.playerElement.append(dom);\r\n  }\r\n\r\n  private releaseUi(ui: InternalUIInstanceManager): void {\r\n    ui.getUI().getDomElement().remove();\r\n    ui.clearEventHandlers();\r\n  }\r\n\r\n  release(): void {\r\n    this.releaseUi(this.playerUi);\r\n    if (this.adsUi) {\r\n      this.releaseUi(this.adsUi);\r\n    }\r\n    this.managerPlayerWrapper.clearEventHandlers();\r\n  }\r\n}\r\n\r\nexport namespace UIManager.Factory {\r\n  export function buildDefaultUI(player: Player, config: UIConfig = {}): UIManager {\r\n    return UIManager.Factory.buildModernUI(player, config);\r\n  }\r\n\r\n  export function buildDefaultSmallScreenUI(player: Player, config: UIConfig = {}): UIManager {\r\n    return UIManager.Factory.buildModernSmallScreenUI(player, config);\r\n  }\r\n\r\n  export function buildDefaultCastReceiverUI(player: Player, config: UIConfig = {}): UIManager {\r\n    return UIManager.Factory.buildModernCastReceiverUI(player, config);\r\n  }\r\n\r\n  export function buildModernUI(player: Player, config: UIConfig = {}): UIManager {\r\n    let settingsPanel = new SettingsPanel({\r\n      components: [\r\n        new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\r\n        new SettingsPanelItem('Speed', new PlaybackSpeedSelectBox()),\r\n        new SettingsPanelItem('Audio Track', new AudioTrackSelectBox()),\r\n        new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\r\n        new SettingsPanelItem('Subtitles', new SubtitleSelectBox())\r\n      ],\r\n      hidden: true\r\n    });\r\n\r\n    let controlBar = new ControlBar({\r\n      components: [\r\n        settingsPanel,\r\n        new Container({\r\n          components: [\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\r\n            new SeekBar({ label: new SeekBarLabel() }),\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\r\n          ],\r\n          cssClasses: ['controlbar-top']\r\n        }),\r\n        new Container({\r\n          components: [\r\n            new PlaybackToggleButton(),\r\n            new VolumeToggleButton(),\r\n            new VolumeSlider(),\r\n            new Component({ cssClass: 'spacer' }),\r\n            new CastToggleButton(),\r\n            new VRToggleButton(),\r\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\r\n            new FullscreenToggleButton(),\r\n          ],\r\n          cssClasses: ['controlbar-bottom']\r\n        }),\r\n      ]\r\n    });\r\n\r\n    let ui = new UIContainer({\r\n      components: [\r\n        new SubtitleOverlay(),\r\n        new BufferingOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new CastStatusOverlay(),\r\n        controlBar,\r\n        new TitleBar(),\r\n        new RecommendationOverlay(),\r\n        new Watermark(),\r\n        new ErrorMessageOverlay()\r\n      ], cssClasses: ['ui-skin-modern']\r\n    });\r\n\r\n    let adsUi = new UIContainer({\r\n      components: [\r\n        new BufferingOverlay(),\r\n        new AdClickOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new Container({\r\n          components: [\r\n            new AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),\r\n            new AdSkipButton()\r\n          ],\r\n          cssClass: 'ui-ads-status'\r\n        }),\r\n        new ControlBar({\r\n          components: [\r\n            new Container({\r\n              components: [\r\n                new PlaybackToggleButton(),\r\n                new VolumeToggleButton(),\r\n                new VolumeSlider(),\r\n                new Component({ cssClass: 'spacer' }),\r\n                new FullscreenToggleButton(),\r\n              ],\r\n              cssClasses: ['controlbar-bottom']\r\n            }),\r\n          ]\r\n        })\r\n      ], cssClasses: ['ui-skin-modern', 'ui-skin-ads']\r\n    });\r\n\r\n    return new UIManager(player, ui, adsUi, config);\r\n  }\r\n\r\n  export function buildModernSmallScreenUI(player: Player, config: UIConfig = {}): UIManager {\r\n    let settingsPanel = new SettingsPanel({\r\n      components: [\r\n        new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\r\n        new SettingsPanelItem('Speed', new PlaybackSpeedSelectBox()),\r\n        new SettingsPanelItem('Audio Track', new AudioTrackSelectBox()),\r\n        new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\r\n        new SettingsPanelItem('Subtitles', new SubtitleSelectBox())\r\n      ],\r\n      hidden: true,\r\n      hideDelay: -1,\r\n    });\r\n    settingsPanel.addComponent(new CloseButton({ target: settingsPanel }));\r\n\r\n    let controlBar = new ControlBar({\r\n      components: [\r\n        new Container({\r\n          components: [\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\r\n            new SeekBar({ label: new SeekBarLabel() }),\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\r\n          ],\r\n          cssClasses: ['controlbar-top']\r\n        }),\r\n      ]\r\n    });\r\n\r\n    let ui = new UIContainer({\r\n      components: [\r\n        new SubtitleOverlay(),\r\n        new BufferingOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new CastStatusOverlay(),\r\n        controlBar,\r\n        new TitleBar({\r\n          components: [\r\n            new MetadataLabel({ content: MetadataLabelContent.Title }),\r\n            new CastToggleButton(),\r\n            new VRToggleButton(),\r\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\r\n            new FullscreenToggleButton(),\r\n          ]\r\n        }),\r\n        settingsPanel,\r\n        new RecommendationOverlay(),\r\n        new Watermark(),\r\n        new ErrorMessageOverlay()\r\n      ], cssClasses: ['ui-skin-modern', 'ui-skin-smallscreen']\r\n    });\r\n\r\n    let adsUi = new UIContainer({\r\n      components: [\r\n        new BufferingOverlay(),\r\n        new AdClickOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new TitleBar({\r\n          components: [\r\n            // dummy label with no content to move buttons to the right\r\n            new Label({ cssClass: 'label-metadata-title' }),\r\n            new FullscreenToggleButton(),\r\n          ]\r\n        }),\r\n        new Container({\r\n          components: [\r\n            new AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),\r\n            new AdSkipButton()\r\n          ],\r\n          cssClass: 'ui-ads-status'\r\n        }),\r\n      ], cssClasses: ['ui-skin-modern', 'ui-skin-ads', 'ui-skin-smallscreen']\r\n    });\r\n\r\n    return new UIManager(player, ui, adsUi, config);\r\n  }\r\n\r\n  export function buildModernCastReceiverUI(player: Player, config: UIConfig = {}): UIManager {\r\n    let controlBar = new ControlBar({\r\n      components: [\r\n        new Container({\r\n          components: [\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\r\n            new SeekBar({ label: new SeekBarLabel() }),\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\r\n          ],\r\n          cssClasses: ['controlbar-top']\r\n        }),\r\n      ]\r\n    });\r\n\r\n    let ui = new CastUIContainer({\r\n      components: [\r\n        new SubtitleOverlay(),\r\n        new BufferingOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new Watermark(),\r\n        controlBar,\r\n        new TitleBar(),\r\n        new ErrorMessageOverlay()\r\n      ], cssClasses: ['ui-skin-modern', 'ui-skin-cast-receiver']\r\n    });\r\n\r\n    return new UIManager(player, ui, null, config);\r\n  }\r\n\r\n  export function buildLegacyUI(player: Player, config: UIConfig = {}): UIManager {\r\n    let settingsPanel = new SettingsPanel({\r\n      components: [\r\n        new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\r\n        new SettingsPanelItem('Audio Track', new AudioTrackSelectBox()),\r\n        new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\r\n        new SettingsPanelItem('Subtitles', new SubtitleSelectBox())\r\n      ],\r\n      hidden: true\r\n    });\r\n\r\n    let controlBar = new ControlBar({\r\n      components: [\r\n        settingsPanel,\r\n        new PlaybackToggleButton(),\r\n        new SeekBar({ label: new SeekBarLabel() }),\r\n        new PlaybackTimeLabel(),\r\n        new VRToggleButton(),\r\n        new VolumeControlButton(),\r\n        new SettingsToggleButton({ settingsPanel: settingsPanel }),\r\n        new CastToggleButton(),\r\n        new FullscreenToggleButton()\r\n      ]\r\n    });\r\n\r\n    let ui = new UIContainer({\r\n      components: [\r\n        new SubtitleOverlay(),\r\n        new CastStatusOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new Watermark(),\r\n        new RecommendationOverlay(),\r\n        controlBar,\r\n        new TitleBar(),\r\n        new ErrorMessageOverlay()\r\n      ], cssClasses: ['ui-skin-legacy']\r\n    });\r\n\r\n    let adsUi = new UIContainer({\r\n      components: [\r\n        new AdClickOverlay(),\r\n        new ControlBar({\r\n          components: [\r\n            new PlaybackToggleButton(),\r\n            new AdMessageLabel(),\r\n            new VolumeControlButton(),\r\n            new FullscreenToggleButton()\r\n          ]\r\n        }),\r\n        new AdSkipButton()\r\n      ], cssClasses: ['ui-skin-legacy', 'ui-skin-ads']\r\n    });\r\n\r\n    return new UIManager(player, ui, adsUi, config);\r\n  }\r\n\r\n  export function buildLegacyCastReceiverUI(player: Player, config: UIConfig = {}): UIManager {\r\n    let controlBar = new ControlBar({\r\n      components: [\r\n        new SeekBar(),\r\n        new PlaybackTimeLabel(),\r\n      ]\r\n    });\r\n\r\n    let ui = new UIContainer({\r\n      components: [\r\n        new SubtitleOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new Watermark(),\r\n        controlBar,\r\n        new TitleBar(),\r\n        new ErrorMessageOverlay()\r\n      ], cssClasses: ['ui-skin-legacy', 'ui-skin-cast-receiver']\r\n    });\r\n\r\n    return new UIManager(player, ui, null, config);\r\n  }\r\n\r\n  export function buildLegacyTestUI(player: Player, config: UIConfig = {}): UIManager {\r\n    let settingsPanel = new SettingsPanel({\r\n      components: [\r\n        new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\r\n        new SettingsPanelItem('Audio Track', new AudioTrackSelectBox()),\r\n        new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\r\n        new SettingsPanelItem('Subtitles', new SubtitleSelectBox())\r\n      ],\r\n      hidden: true\r\n    });\r\n\r\n    let controlBar = new ControlBar({\r\n      components: [settingsPanel,\r\n        new PlaybackToggleButton(),\r\n        new SeekBar({ label: new SeekBarLabel() }),\r\n        new PlaybackTimeLabel(),\r\n        new VRToggleButton(),\r\n        new VolumeToggleButton(),\r\n        new VolumeSlider(),\r\n        new VolumeControlButton(),\r\n        new VolumeControlButton({ vertical: false }),\r\n        new SettingsToggleButton({ settingsPanel: settingsPanel }),\r\n        new CastToggleButton(),\r\n        new FullscreenToggleButton()\r\n      ]\r\n    });\r\n\r\n    let ui = new UIContainer({\r\n      components: [\r\n        new SubtitleOverlay(),\r\n        new CastStatusOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new Watermark(),\r\n        new RecommendationOverlay(),\r\n        controlBar,\r\n        new TitleBar(),\r\n        new ErrorMessageOverlay()\r\n      ], cssClasses: ['ui-skin-legacy']\r\n    });\r\n\r\n    return new UIManager(player, ui, null, config);\r\n  }\r\n}\r\n\r\nexport interface SeekPreviewArgs extends NoArgs {\r\n  /**\r\n   * The timeline position in percent where the event originates from.\r\n   */\r\n  position: number;\r\n  /**\r\n   * The timeline marker associated with the current position, if existing.\r\n   */\r\n  marker?: TimelineMarker;\r\n}\r\n\r\n/**\r\n * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.\r\n */\r\nexport class UIInstanceManager {\r\n  private playerWrapper: PlayerWrapper;\r\n  private ui: UIContainer;\r\n  private config: UIConfig;\r\n\r\n  private events = {\r\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\r\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewArgs>(),\r\n    onSeeked: new EventDispatcher<SeekBar, NoArgs>(),\r\n    onComponentShow: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\r\n    onComponentHide: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\r\n    onControlsShow: new EventDispatcher<UIContainer, NoArgs>(),\r\n    onControlsHide: new EventDispatcher<UIContainer, NoArgs>(),\r\n  };\r\n\r\n  constructor(player: Player, ui: UIContainer, config: UIConfig = {}) {\r\n    this.playerWrapper = new PlayerWrapper(player);\r\n    this.ui = ui;\r\n    this.config = config;\r\n  }\r\n\r\n  getConfig(): UIConfig {\r\n    return this.config;\r\n  }\r\n\r\n  getUI(): UIContainer {\r\n    return this.ui;\r\n  }\r\n\r\n  getPlayer(): Player {\r\n    return this.playerWrapper.getPlayer();\r\n  }\r\n\r\n  /**\r\n   * Fires when a seek starts.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onSeek(): EventDispatcher<SeekBar, NoArgs> {\r\n    return this.events.onSeek;\r\n  }\r\n\r\n  /**\r\n   * Fires when the seek timeline is scrubbed.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onSeekPreview(): EventDispatcher<SeekBar, SeekPreviewArgs> {\r\n    return this.events.onSeekPreview;\r\n  }\r\n\r\n  /**\r\n   * Fires when a seek is finished.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onSeeked(): EventDispatcher<SeekBar, NoArgs> {\r\n    return this.events.onSeeked;\r\n  }\r\n\r\n  /**\r\n   * Fires when a component is showing.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onComponentShow(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\r\n    return this.events.onComponentShow;\r\n  }\r\n\r\n  /**\r\n   * Fires when a component is hiding.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onComponentHide(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\r\n    return this.events.onComponentHide;\r\n  }\r\n\r\n  /**\r\n   * Fires when the UI controls are showing.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onControlsShow(): EventDispatcher<UIContainer, NoArgs> {\r\n    return this.events.onControlsShow;\r\n  }\r\n\r\n  /**\r\n   * Fires when the UI controls are hiding.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onControlsHide(): EventDispatcher<UIContainer, NoArgs> {\r\n    return this.events.onControlsHide;\r\n  }\r\n\r\n  protected clearEventHandlers(): void {\r\n    this.playerWrapper.clearEventHandlers();\r\n\r\n    let events = <any>this.events; // avoid TS7017\r\n    for (let event in events) {\r\n      let dispatcher = <EventDispatcher<Object, Object>>events[event];\r\n      dispatcher.unsubscribeAll();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality\r\n * that components receiving a reference to the {@link UIInstanceManager} should not have access to.\r\n */\r\nclass InternalUIInstanceManager extends UIInstanceManager {\r\n  clearEventHandlers(): void {\r\n    super.clearEventHandlers();\r\n  }\r\n\r\n  getWrappedPlayer(): WrappedPlayer {\r\n    // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it\r\n    // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does\r\n    // not need to be exported\r\n    return <WrappedPlayer>this.getPlayer();\r\n  }\r\n}\r\n\r\n/**\r\n * Extended interface of the {@link Player} for use in the UI.\r\n */\r\ninterface WrappedPlayer extends Player {\r\n  /**\r\n   * Fires an event on the player that targets all handlers in the UI but never enters the real player.\r\n   * @param event the event to fire\r\n   * @param data data to send with the event\r\n   */\r\n  fireEventInUI(event: EVENT, data: {}): void;\r\n}\r\n\r\n/**\r\n * Wraps the player to track event handlers and provide a simple method to remove all registered event\r\n * handlers from the player.\r\n */\r\nclass PlayerWrapper {\r\n\r\n  private player: Player;\r\n  private wrapper: WrappedPlayer;\r\n\r\n  private eventHandlers: { [eventType: string]: PlayerEventCallback[]; } = {};\r\n\r\n  constructor(player: Player) {\r\n    this.player = player;\r\n\r\n    let self = this;\r\n\r\n    // Collect all public API methods of the player\r\n    let methods = <any[]>[];\r\n    for (let member in player) {\r\n      if (typeof (<any>player)[member] === 'function') {\r\n        methods.push(member);\r\n      }\r\n    }\r\n\r\n    // Create wrapper object and add function wrappers for all API methods that do nothing but calling the base method\r\n    // on the player\r\n    let wrapper = <any>{};\r\n    for (let member of methods) {\r\n      wrapper[member] = function() {\r\n        // console.log('called ' + member); // track method calls on the player\r\n        return (<any>player)[member].apply(player, arguments);\r\n      };\r\n    }\r\n\r\n    // Explicitly add a wrapper method for 'addEventHandler' that adds added event handlers to the event list\r\n    wrapper.addEventHandler = function(eventType: EVENT, callback: PlayerEventCallback): Player {\r\n      player.addEventHandler(eventType, callback);\r\n\r\n      if (!self.eventHandlers[eventType]) {\r\n        self.eventHandlers[eventType] = [];\r\n      }\r\n\r\n      self.eventHandlers[eventType].push(callback);\r\n\r\n      return wrapper;\r\n    };\r\n\r\n    // Explicitly add a wrapper method for 'removeEventHandler' that removes removed event handlers from the event list\r\n    wrapper.removeEventHandler = function(eventType: EVENT, callback: PlayerEventCallback): Player {\r\n      player.removeEventHandler(eventType, callback);\r\n\r\n      if (self.eventHandlers[eventType]) {\r\n        ArrayUtils.remove(self.eventHandlers[eventType], callback);\r\n      }\r\n\r\n      return wrapper;\r\n    };\r\n\r\n    wrapper.fireEventInUI = function(event: EVENT, data: {}): void {\r\n      if (self.eventHandlers[event]) { // check if there are handlers for this event registered\r\n        // Extend the data object with default values to convert it to a {@link PlayerEvent} object.\r\n        let playerEventData = <PlayerEvent>Object.assign({}, {\r\n          timestamp: Date.now(),\r\n          type: event,\r\n          // Add a marker property so the UI can detect UI-internal player events\r\n          uiSourced: true,\r\n        }, data);\r\n\r\n        // Execute the registered callbacks\r\n        for (let callback of self.eventHandlers[event]) {\r\n          callback(playerEventData);\r\n        }\r\n      }\r\n    };\r\n\r\n    this.wrapper = <WrappedPlayer>wrapper;\r\n  }\r\n\r\n  /**\r\n   * Returns a wrapped player object that can be used on place of the normal player object.\r\n   * @returns {WrappedPlayer} a wrapped player\r\n   */\r\n  getPlayer(): WrappedPlayer {\r\n    return this.wrapper;\r\n  }\r\n\r\n  /**\r\n   * Clears all registered event handlers from the player that were added through the wrapped player.\r\n   */\r\n  clearEventHandlers(): void {\r\n    for (let eventType in this.eventHandlers) {\r\n      for (let callback of this.eventHandlers[eventType]) {\r\n        this.player.removeEventHandler(eventType, callback);\r\n      }\r\n    }\r\n  }\r\n}","export namespace ArrayUtils {\r\n  /**\r\n   * Removes an item from an array.\r\n   * @param array the array that may contain the item to remove\r\n   * @param item the item to remove from the array\r\n   * @returns {any} the removed item or null if it wasn't part of the array\r\n   */\r\n  export function remove<T>(array: T[], item: T): T | null {\r\n    let index = array.indexOf(item);\r\n\r\n    if (index > -1) {\r\n      return array.splice(index, 1)[0];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport namespace StringUtils {\r\n\r\n  export let FORMAT_HHMMSS: string = 'hh:mm:ss';\r\n  export let FORMAT_MMSS: string = 'mm:ss';\r\n\r\n  /**\r\n   * Formats a number of seconds into a time string with the pattern hh:mm:ss.\r\n   *\r\n   * @param totalSeconds the total number of seconds to format to string\r\n   * @param format the time format to output (default: hh:mm:ss)\r\n   * @returns {string} the formatted time string\r\n   */\r\n  export function secondsToTime(totalSeconds: number, format: string = FORMAT_HHMMSS): string {\r\n    let isNegative = totalSeconds < 0;\r\n\r\n    if (isNegative) {\r\n      // If the time is negative, we make it positive for the calculation below\r\n      // (else we'd get all negative numbers) and reattach the negative sign later.\r\n      totalSeconds = -totalSeconds;\r\n    }\r\n\r\n    // Split into separate time parts\r\n    let hours = Math.floor(totalSeconds / 3600);\r\n    let minutes = Math.floor(totalSeconds / 60) - hours * 60;\r\n    let seconds = Math.floor(totalSeconds) % 60;\r\n\r\n    return (isNegative ? '-' : '') + format\r\n        .replace('hh', leftPadWithZeros(hours, 2))\r\n        .replace('mm', leftPadWithZeros(minutes, 2))\r\n        .replace('ss', leftPadWithZeros(seconds, 2));\r\n  }\r\n\r\n  /**\r\n   * Converts a number to a string and left-pads it with zeros to the specified length.\r\n   * Example: leftPadWithZeros(123, 5) => '00123'\r\n   *\r\n   * @param num the number to convert to string and pad with zeros\r\n   * @param length the desired length of the padded string\r\n   * @returns {string} the padded number as string\r\n   */\r\n  function leftPadWithZeros(num: number | string, length: number): string {\r\n    let text = num + '';\r\n    let padding = '0000000000'.substr(0, length - text.length);\r\n    return padding + text;\r\n  }\r\n\r\n  /**\r\n   * Fills out placeholders in an ad message.\r\n   *\r\n   * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and\r\n   * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current\r\n   * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time\r\n   * in seconds. If specified, it must be of the following format:\r\n   * - %d - Inserts the time as an integer.\r\n   * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.\r\n   * - %f - Inserts the time as a float.\r\n   * - %0Nf - Inserts the time as a float with leading zeroes.\r\n   * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time\r\n   * 10.123\r\n   * would be printed as 0010.12).\r\n   * - %hh:mm:ss\r\n   * - %mm:ss\r\n   *\r\n   * @param adMessage an ad message with optional placeholders to fill\r\n   * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped\r\n   * @param player the player to get the time data from\r\n   * @returns {string} the ad message with filled placeholders\r\n   */\r\n  export function replaceAdMessagePlaceholders(adMessage: string, skipOffset: number, player: bitmovin.player.Player) {\r\n    let adMessagePlaceholderRegex = new RegExp(\r\n      '\\\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\\\d*(\\\\.\\\\d+(d|f)|d|f)|\\\\.\\\\d+f|d|f)|hh:mm:ss|mm:ss)})',\r\n      'g'\r\n    );\r\n\r\n    return adMessage.replace(adMessagePlaceholderRegex, function(formatString) {\r\n      let time = 0;\r\n      if (formatString.indexOf('remainingTime') > -1) {\r\n        if (skipOffset) {\r\n          time = Math.ceil(skipOffset - player.getCurrentTime());\r\n        } else {\r\n          time = player.getDuration() - player.getCurrentTime();\r\n        }\r\n      } else if (formatString.indexOf('playedTime') > -1) {\r\n        time = player.getCurrentTime();\r\n      } else if (formatString.indexOf('adDuration') > -1) {\r\n        time = player.getDuration();\r\n      }\r\n      return formatNumber(time, formatString);\r\n    });\r\n  }\r\n\r\n  function formatNumber(time: number, format: string) {\r\n    let formatStringValidationRegex = /%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)/;\r\n    let leadingZeroesRegex = /(%0[1-9]\\d*)(?=(\\.\\d+f|f|d))/;\r\n    let decimalPlacesRegex = /\\.\\d*(?=f)/;\r\n\r\n    if (!formatStringValidationRegex.test(format)) {\r\n      // If the format is invalid, we set a default fallback format\r\n      format = '%d';\r\n    }\r\n\r\n    // Determine the number of leading zeros\r\n    let leadingZeroes = 0;\r\n    let leadingZeroesMatches = format.match(leadingZeroesRegex);\r\n    if (leadingZeroesMatches) {\r\n      leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));\r\n    }\r\n\r\n    // Determine the number of decimal places\r\n    let numDecimalPlaces = null;\r\n    let decimalPlacesMatches = format.match(decimalPlacesRegex);\r\n    if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {\r\n      numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));\r\n      if (numDecimalPlaces > 20) {\r\n        numDecimalPlaces = 20;\r\n      }\r\n    }\r\n\r\n    // Float format\r\n    if (format.indexOf('f') > -1) {\r\n      let timeString = '';\r\n\r\n      if (numDecimalPlaces !== null) {\r\n        // Apply fixed number of decimal places\r\n        timeString = time.toFixed(numDecimalPlaces);\r\n      } else {\r\n        timeString = '' + time;\r\n      }\r\n\r\n      // Apply leading zeros\r\n      if (timeString.indexOf('.') > -1) {\r\n        return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));\r\n      } else {\r\n        return leftPadWithZeros(timeString, leadingZeroes);\r\n      }\r\n\r\n    }\r\n    // Time format\r\n    else if (format.indexOf(':') > -1) {\r\n      let totalSeconds = Math.ceil(time);\r\n\r\n      // hh:mm:ss format\r\n      if (format.indexOf('hh') > -1) {\r\n        return secondsToTime(totalSeconds);\r\n      }\r\n      // mm:ss format\r\n      else {\r\n        let minutes = Math.floor(totalSeconds / 60);\r\n        let seconds = totalSeconds % 60;\r\n\r\n        return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);\r\n      }\r\n    }\r\n    // Integer format\r\n    else {\r\n      return leftPadWithZeros(Math.ceil(time), leadingZeroes);\r\n    }\r\n  }\r\n}\r\n\r\nexport namespace PlayerUtils {\r\n\r\n  import Player = bitmovin.player.Player;\r\n\r\n  export function isSourceLoaded(player: Player): boolean {\r\n    return player.getConfig().source !== undefined;\r\n  }\r\n}"]}