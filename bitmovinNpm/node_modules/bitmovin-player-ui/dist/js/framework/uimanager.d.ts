import { UIContainer } from './components/uicontainer';
import { Component, ComponentConfig } from './components/component';
import { SeekBar } from './components/seekbar';
import { NoArgs, EventDispatcher } from './eventdispatcher';
import Player = bitmovin.player.Player;
export interface UIRecommendationConfig {
    title: string;
    url: string;
    thumbnail?: string;
    duration?: number;
}
export interface TimelineMarker {
    time: number;
    title?: string;
}
export interface UIConfig {
    metadata?: {
        title?: string;
        description?: string;
        markers?: TimelineMarker[];
    };
    recommendations?: UIRecommendationConfig[];
}
export declare class UIManager {
    private player;
    private playerElement;
    private playerUi;
    private adsUi;
    private config;
    private managerPlayerWrapper;
    constructor(player: Player, playerUi: UIContainer, adsUi: UIContainer, config?: UIConfig);
    getConfig(): UIConfig;
    private configureControls(component, manager);
    private addUi(ui);
    private releaseUi(ui);
    release(): void;
}
export declare namespace UIManager.Factory {
    function buildDefaultUI(player: Player, config?: UIConfig): UIManager;
    function buildDefaultSmallScreenUI(player: Player, config?: UIConfig): UIManager;
    function buildDefaultCastReceiverUI(player: Player, config?: UIConfig): UIManager;
    function buildModernUI(player: Player, config?: UIConfig): UIManager;
    function buildModernSmallScreenUI(player: Player, config?: UIConfig): UIManager;
    function buildModernCastReceiverUI(player: Player, config?: UIConfig): UIManager;
    function buildLegacyUI(player: Player, config?: UIConfig): UIManager;
    function buildLegacyCastReceiverUI(player: Player, config?: UIConfig): UIManager;
    function buildLegacyTestUI(player: Player, config?: UIConfig): UIManager;
}
export interface SeekPreviewArgs extends NoArgs {
    /**
     * The timeline position in percent where the event originates from.
     */
    position: number;
    /**
     * The timeline marker associated with the current position, if existing.
     */
    marker?: TimelineMarker;
}
/**
 * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.
 */
export declare class UIInstanceManager {
    private playerWrapper;
    private ui;
    private config;
    private events;
    constructor(player: Player, ui: UIContainer, config?: UIConfig);
    getConfig(): UIConfig;
    getUI(): UIContainer;
    getPlayer(): Player;
    /**
     * Fires when a seek starts.
     * @returns {EventDispatcher}
     */
    readonly onSeek: EventDispatcher<SeekBar, NoArgs>;
    /**
     * Fires when the seek timeline is scrubbed.
     * @returns {EventDispatcher}
     */
    readonly onSeekPreview: EventDispatcher<SeekBar, SeekPreviewArgs>;
    /**
     * Fires when a seek is finished.
     * @returns {EventDispatcher}
     */
    readonly onSeeked: EventDispatcher<SeekBar, NoArgs>;
    /**
     * Fires when a component is showing.
     * @returns {EventDispatcher}
     */
    readonly onComponentShow: EventDispatcher<Component<ComponentConfig>, NoArgs>;
    /**
     * Fires when a component is hiding.
     * @returns {EventDispatcher}
     */
    readonly onComponentHide: EventDispatcher<Component<ComponentConfig>, NoArgs>;
    /**
     * Fires when the UI controls are showing.
     * @returns {EventDispatcher}
     */
    readonly onControlsShow: EventDispatcher<UIContainer, NoArgs>;
    /**
     * Fires when the UI controls are hiding.
     * @returns {EventDispatcher}
     */
    readonly onControlsHide: EventDispatcher<UIContainer, NoArgs>;
    protected clearEventHandlers(): void;
}
